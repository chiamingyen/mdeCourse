.. @+leo-ver=5-thin
.. @+node:amd_yen.20130308221230.2493: * @file misc.txt
.. @@language rest
.. @@tabwidth -4

.. @+at @rst-options
..  call_docutils=False
..  code_mode=False
..  generate_rst=True
..  http_server_support = False
..  show_organizer_nodes=True
..  show_headlines=True
..  show_leo_directives=True
..  stylesheet_path=..\doc
..  write_intermediate_file = True
..  verbose=True
.. @@c

.. @+all
.. @+node:amd_yen.20130308221230.2494: ** @rst document\misc.html
################################################
綜合資料
################################################

.. index:: 綜合資料

.. contents::
    :depth: 3
.. @+node:amd_yen.20130308221230.2495: *3* @rst-no-head Links
.. @+node:amd_yen.20130308221230.2481: *3* MISC 綜合資料
.. @+node:amd_yen.20130312013510.2093: *4* Python 程式開發
.. @+node:amd_yen.20130318140025.1549: *5* 有關 portableKMOL
https://code.google.com/p/pythonxy/ 的作者最近推出 WinPython https://code.google.com/p/winpython/, 著眼在於 Windows 環境的可攜 Python 科學與工程程式開發環境, 主要的視窗圖形介面開發工具為 PyQt.

仔細比對 portableKMOL 與 WinPython, 其實開發理念非常一致: 希望善用 Python 在工程與科學領域的開發優勢, 從而透過可攜性工具, 讓所開發出來的 Python 程式能夠跨平台.

WinPython 所大力推崇的 IPython, Numpy, Scipy 與 matplotlib, 在 portableKMOL 也都納入 (但是 IPython 從 USB 2.0 的隨身碟開啟速度過慢, 因此目前並未置入), 也都使用 SciTE 作為基本文件的編輯器, 其他的差異在於:

WinPython 比較強調單機開發, 而 portableKMOL 則比較強調網際開發 (因為著眼於協同設計)

WinPython 的 IDE 為 Spyder, 而 portableKMOL 則採用 SciTE 來解譯 Python 與 C, 並且希望直接在網際環境中協同開發程式碼 (目前青睞 cloud9 IDE 環境, 但是也僅止於 php, c9.io 對於 Python3 的支援還不夠完備).

WinPython 以 cx_Freeze 打包 .exe 程式套件, portableKMOL 目前則以開放程式碼的套件為主.

WinPython 似乎沒有網際方案, portableKMOL 則採用 CherryPy (Python), django (Python), CMSimple (php) 與 Simple Groupware (php) 作為網際程式開發框架.

WinPython 安裝 Cython, portableKMOL 在加速 Python 程式運算方面希望採用 PyCUDA+mpi4py, 以圖形卡的平行運算為主.

WinPython 安裝 zmq, portableKMOL 尚未導入 zmq.

初步比較:

WinPython 的可攜性在中文電腦上無法因應有空白的目錄, 而 portableKMOL 採用 subst 指令, 讓程式固定在 V:\, 除了方便設定, 也有較高的可攜性.

近程規劃:

    持續使用 portableKMOL, 或許可以設法導入 WinPython 對於可攜套件安裝方案, 甚或 Spyder 的 IDE 架構.
    
    在 portableKMOL 中導入 FreeCAD 0.13 版, 並且設法導入 django based 的 PDM/PLM 系統.

.. @+node:amd_yen.20130312013510.2095: *5* @url 為何選擇 Python
http://www.stat.washington.edu/~hoytak/blog/whypython.html

Python 主體加上 numpy/scipy, ipython, matplotlib 可以提供全方位的應用環境.

Python 程式語法簡潔易讀, 縮排讓每個人所寫的程式都符合相同格式 (務必遵守 tab = 4 個 spaces 的習慣, 不要混用 tab 與 space)

高階與低階程式應用的平衡 - 一般應用可以直接使用 Python, 硬體控制可以利用 C 作為底層, 由 Python 操控呼叫, 需要運算速度時也可以透過 C 進行平行運算, 也可以透過 http://www.cython.org/ 得到好處.
.. @+node:amd_yen.20130312013510.2094: *5* @url 基本概念
https://python-guide.readthedocs.org/en/latest/

雖然大多數內容都以 Python 2.X 語法為主, 但是所列出的主題範圍非常完整, 從基本程式開發概念到套件包裝的議題都有涉及, 能提供不錯的參考.
.. @+node:amd_yen.20130320201815.1567: *5* @url  Virtualenv
http://www.virtualenv.org/en/latest/

使用 virtualenv 工具來處理不同應用程式彼此版次相依的問題
.. @+node:amd_yen.20130503185304.5151: *4* LaTeX 簡介
LaTeX 源自 TeX, 而 TeX 是一套在 1978年由 Donald E. Knuth 所開發的一套排版系統(typesetting system or document preparation system), 電腦排版系統的流程由使用者利用 TeX 程式標註語法來編寫排版流程中所需要的文字檔案, 之後經過 LaTeX 系統編譯後可以輸出各種格式的出版文件, 其中包括 pdf, html, epub 與 chm 等常用格式.

中文參考資料: http://zzg34b.w3.c361.com/

英文參考資料: http://tobi.oetiker.ch/lshort/lshort.pdf

以下為一個簡單的 LaTeX 文件, 可以利用 SciTE 編輯後存成 mytext.tex 檔案.

.. code-block:: none

    \documentclass{article}
    \title{My title}
    
    \begin{document}
    
    \maketitle
    
    This i my document content
    
    \end{document}

如何利用 LaTeX 將 mytext.tex 轉為 pdf 格式文件?

Simple. When you write a line like:

定義標題

\title{My title}

產生標題

\maketitle

宣告文件類別

\documentclass{article}

文件開頭標註

\begin{document}

文件結束標註

\end{document}

段落與子段落

.. code-block:: none

    \documentclass {article}
    \title{A sample document}
    \author{The Author}
    \date{23 Jan 2013}
    
    \begin{document}
    
    \maketitle
    
    \section{This is a section}
    
    Articles are usually organized as sections, sub-sections etc.
    
    \subsection{This is a sub section}
    
    A subsection is part of a section.
    
    \section{This is another section}
    
    This section does not have any sub-section!
    
    \end{document}
    
    \documentclass {article}
    
    \begin{document}
    
    Here is how you typeset a short quotation:
    
    \begin{quote}
    This is an example of a short quotation. It consists of a single
    para of text. See how it is formatted.
    \end{quote}
    
    And, here is an example of a longer quotation:
    
    \begin{quotation}
    This is an example of a longer quotation. It consists of more
    than one paragraph of text.
    
    This is the second para of the quotation.
    \end{quotation}
    
    Here is an example of an unnumbered list:
    \begin{itemize}
     \item Apple
     \item Orange
     \item Banana
    \end{itemize}
    
    And, an example of a numbered list:
    \begin{enumerate}
     \item Newton
     \item Pascal
     \item Euler
    \end{enumerate}
    
    \end{document}
    
.. code-block:: none
    
    \documentclass {article}
    \begin{document}
    
    Here is a formula: $E = mc^{2}$
    
    Same formula, but this is typeset differently: \[ E = mc^{2} \]
    
    Same formula again, different typesetting:
     \begin{equation}
     E = mc^{2}
     \end{equation}
    
    Repeat:
     \begin{equation}
      E = mc^{2}
     \end{equation}
    
    \end{document}
    
    picture environment
    
    \documentclass {article}
    \begin{document}
    
    \section{This is a section}
    
    \begin{picture}(100,200)
    
    \put (0,0) {A}
    \put (100,0) {B}
    \put (100, 200) {C}
    \put (0, 200) {D}
    \end{picture}
    
    \end{document}


The LaTeX command:

\begin{picture}(100, 200)
creates a “picture environment” of width 100 units and height 200 units (imagine the picture environment producing a 100x200 box) - a unit has a default value of about 0.35mm. The command:

\put (0,0) {A}
writes the symbol “A” at location (0,0) of the box; location (0,0) is the (x, y) co-ordinate of the lower left corner of the box (it is the origin). The +ve X axis is towards the right and the upward direction represents +ve Y axis. The command:

\put (100,200) {C}
places the symbol C at the top right corner. The commands:

\put (100, 0) {B}
\put (0, 200) {D}
places the symbols B and D at the bottom right and top left corners of the box.

16.2. Drawing Lines
Drawing lines in LaTeX is tricky business - due to certain limitations, it is not possible to draw lines with any random slope. The natural way for a line drawing command to work would be to accept the co-ordinates of the end points and draw a line connecting the points. But that is not the way it is done in LaTeX. To simplify things, we consider three separate cases: drawing a horizontal line, drawing a vertical line and drawing lines with many other slopes. For all three cases, we assume a box of size 100x200 with origin (0, 0) at the bottom left corner (the same box as in the previous section).

16.2.1. Horizontal lines
Let’s say we wish to draw a horizontal line of length 40 units from point (30, 90). Here is how it is done:

\put(30,90){\line(1,0){40}}
We can identify two separate parts in this command; the first part:

\put(30, 90)
says: start the line at point (30, 90). The next part is:

\line(1,0){40}
This is how it works: LaTeX draws a line of length 40 units and passing through the points:

(30, 90) and (30 + 1, 90 + 0)
and ending at (70, 90).

What if we write:

\put(30, 90){ \line(-1, 0) {30} }
We get a line passing through (30, 90) and (30 - 1, 90 + 0) of length 30 units, ending at (0, 90).

So, the general command for drawing a horizontal line is:

\put(x,y) { \line(A, 0){len} }
Where (x,y) is the starting co-ordinate of the line, A is +1 or -1 (depending on whether you want to draw to the right of (x, y) or left of (x, y) and len is the length of the line.

16.2.2. Vertical lines
It should be easy to guess how vertical lines are drawn! Here is an example:

\put(30,90) {\line(0,1) {40}}
This draws a vertical line connecting (30, 90) and (30, 91) of length 40 units ending at (30, 130). The general command is:

\put(x,y) { \line(0, A){len} }
Where (x, y) is the starting co-ordinate of the line, A is +1 or -1 depending on whether the line goes up or down and len is the length of the line.

16.2.3. Slanted lines (neither vertical nor horizontal)
What kind of line does LaTeX draw if we write:

\put(30,90) {\line(1, -1) {40}}
LaTeX draws a line going through (30, 90) and (31, 89) (ie, sloping down to the right); what is the length of this line? That is not specified here - the number 40 written in curly brackets simply indicates the fact that as the line moves down to the right, it will end at that point where the X co-ordinate is 30 + 40.

What if we write:

\put(40,90) {\line(-1, 1) {30}}
We get a line starting at (40, 90), going through (39, 91) (going up to the left) and ending at a point whose X co-ordinate is 40 - 30, ie 10.

The general form of the command for a slanted line is:

\put(x,y) {\line(p, q) {len}}
LaTeX has certain restrictions on the values of p and q - this places a limit on the slopes of the lines which we can draw. Both p and q should be integers between -6 and +6, inclusive. Also, they should have no common divisor bigger than 1. That is, p/q should be a fraction in its simplest form - you can’t have something like p = 2 and q = 4; you should write p = 1 and q = 2. The following are all illegal values for p and q:

(1.2, 3) --- no decimal permitted
(3, 6) --- common divisor 3 bigger than 1
(1, 7) --- one value bigger than +6
The smallest slanted line which LaTeX can draw is a line of length 10 points (about 3.5mm). LaTeX will draw nothing if you try to draw slanted lines less than this length.

16.3. Circles, ovals and bezier curves
Note We are assuming that the picture environment has width 100 units and height 200 units in all the examples below.
Here is how you can draw a circle:

\put(20,30) {circle{20}}
This draws a circle at center (20,30) with diameter 20 points.

The command:

\put(20,30) {\circle*{20}}
draws a disc (a filled circle) at (20,30) with a diameter of 20 points.

LaTeX knows to draw discs/circles with only a certain fixed number of diameters - it will choose the one whose diameter is closest to what you have specified. Also, the set of possible diameters has an upper limit.

The command:

\put(30,30) {\oval(20,10)}
will draw an oval (a rectangle with rounded corners) of width 20 units and height 10 units.

The qbezier command takes three points as arguments and draws a quadratic bezier curve connecting them:

\qbezier (0,0) (50,100) (100, 0)
16.4. Using the “graphics” package
Using a package called “graphics”, we can include images in our LaTeX document, perform manipulations like rotation/scaling, add colour etc.

16.4.1. Scaling, Rotation, Colour change
Create a file called pic2.tex with the following lines in it:

.. code-block:: none

    \documentclass {article}
    \usepackage{graphics}
    \usepackage{color}
    
    \begin{document}
    
    \scalebox{4}{Hello}
    
    \rotatebox{40} {Maths}
    
    Python \reflectbox{Python}
    
    \textcolor{red}{GNU/Linux} means Freedom!
    
    \colorbox{green}{Malayalam}
    
    \end{document}

16.4.2. Displaying images
Sometimes, you may have to include an external image file (say a JPG or PNG file) in your LaTeX document. There are two ways to do it.

Suppose you are using the “pdflatex” command and want to display a photo of Ramanujan somewhere in your document. Just write:

\includegraphics{ramanujan.jpg}
Note that “pdflatex” supports only JPG and PNG formats. The file “ramanujan.jpg” should exist in the folder(directory) from where you are issuing the “pdflatex” command.

If you are using the “latex” command, you will have to first convert your JPG/PNG image to what is called an encapsulated postscript file. This can be done very easily on GNU/Linux systems by using a command called “convert”. At the command prompt, you should type:

convert ramanujan.jpg ramanujan.eps
Once this is done, you can use:

\includegraphics{ramanujan.eps}
to include the image in your document.

16.5. Using “pstricks” for advanced picture drawing
We have seen that the facilities available by default in LaTeX for drawing lines, circles etc are not very sophisticated. A package called “pstricks” can be used for generating complex figures without too much trouble. Let’s try to plot a curve using pstricks:

.. code-block:: none
    
    \documentclass {article}
    \usepackage{pstricks}
    \usepackage{pst-plot}
    
    \begin{document}
    
    \begin{pspicture}(-3, -2)(3, 2)
    \psaxes(0,0)(-3,-2)(3,2)
    \psplot[plotstyle=curve] {-1.5} {1.5} {x 3 exp x sub}
    \end{pspicture}
    
    \end{document}
    
Two packages have to be included: pstricks and pst-plot. Also, “pdflatex” will not work with the above file - you have to use the “latex” command itself.

The line:

\begin{pspicture} (-3, -2) (3, 2)
starts a “pspicture” environment - think of it as a request to LaTeX to leave enough space for a rectangle whose bottom left corner has co-ordinate (-3, -2) and top right corner has co-ordinate (3, 2).

The next command:

\psaxes(0,0) (-3, -2) (3, 2)
draws the co-ordinate axes. The X axis and Y axis meet at the point (0, 0) and they have to be visualized as being enclosed in an imaginary rectangular box with bottom left corner at (-3, -2) and top right corner at (3, 2).

We are plotting the curve:

y = (x * x * x) - x
This equation has to be specified in a peculiar form called postfix. An arithmetic expression written in the usual way:

2 * 3 + 4
is called an infix expression. Here is another way to write the same expression:

2 3 * 4 +
This is called a postfix expression. The logic is simple. Read the expression from left to right. When you encounter an operator, simply apply the operator to the two operands to the left. In the above case, the moment we see the * operator (multiplication), we can rewrite the expression as:

6 4 +
Now, when we encounter the + operator, we can rewrite the expression as:

10
Let’s examine this line in our LaTeX document:

\psplot[plotstyle=curve] {-1.5} {1.5} {x 3 exp x sub}
We are asking LaTeX to plot a curve; the curve is given by the equation:

y = x 3 exp x sub
(note: you need to specify only the right hand side of the equation).

This equation is written in postfix form; exp is the exponentiation operator and sub is the subtraction operator. So we can read this as:

y = (x raised to 3) minus x
The numbers -1.5 and +1.5 in brackets refers to the range of possible values for x.
.. @+node:amd_yen.20130503185304.5152: *5* LaTeX 範例
.. code-block:: none

    \documentclass[12pt]{article}
    \usepackage{amsmath}
    \title{\LaTeX}
    \date{}
    \begin{document}
      \maketitle
      \LaTeX{} is a document preparation system for the \TeX{}
      typesetting program. It offers programmable desktop publishing
      features and extensive facilities for automating most aspects of
      typesetting and desktop publishing, including numbering and
      cross-referencing, tables and figures, page layout, bibliographies,
      and much more. \LaTeX{} was originally written in 1984 by Leslie
      Lamport and has become the dominant method for using \TeX; few
      people write in plain \TeX{} anymore. The current version is
      \LaTeXe.
     
      % This is a comment; it will not be shown in the final output.
      % The following shows a little of the typesetting power of LaTeX:
      \begin{align}
        E &= mc^2                              \\
        m &= \frac{m_0}{\sqrt{1-\frac{v^2}{c^2}}}
      \end{align}
    \end{document}
    
.. code-block:: none

    \documentclass{article}
    % Begin 中文設定 不需要中文時, % 放入行頭, 作 comment
    \usepackage{fontspec} %加這個就可以設定字體 
    \usepackage{xeCJK} %讓中英文字體分開設置
    \setCJKmainfont{HanWangWCL06}
    %字型設定變換請參考王漢宗教授字型表
    \XeTeXlinebreaklocale "zh" %這兩行一定要加，中文才能自動換行
    \XeTeXlinebreakskip = 0pt plus 1pt
    % End 中文設定
    
    \title{Test Title}
    \author{Yu-Tuan Lin}
    \date{October 2011}  
    % date{} --> Today ;  Latex 中 % 之後為說明, 不會在文件顯現 
    
    \begin{document}
    \maketitle
       Hello world! 可以輸入中文! 點選 TextArea 下方 \\
        Launch CodeCogs Equation Editor 取得 Tex 格式方程式.
    \end{document}
.. @+node:amd_yen.20130308221230.2482: *4* Linux 操作
將目錄壓縮成 .tar.gz 檔案

.. code-block:: none

    tar czf filename.tar.gz folder

解開 .tar.gz

.. code-block:: none

    gunzip -c /path/to/folder/filename.tar.gz

或者

.. code-block:: none

    tar -zxvf /path/to/folder/filename.tar.gz

若要壓成 .tar

.. code-block:: none

    tar cvf file.tar directory

解開 .tar 

.. code-block:: none

    tar xvf file.tar
.. @+node:amd_yen.20130312013510.2092: *5* @url 網路管理員教材
https://ops-school.readthedocs.org/en/latest/
.. @+node:amd_yen.20130308221230.2483: *4* 使用 x-window
1. 在 Windows 端執行 xlaunch, 這是 x-win 的 server

2. 以 putty 連線到 remote 已經安裝 X windows 套件的 Ubuntu 伺服器

3. putty 中連線的 SSH->X11 必須勾選 Enable X11 forwarding, 並且在 X display location 中輸入  localhost:0

4. 連線後, 只要在 command 區輸入 xterm& 就可以帶出 X terminal

5. 針對所出現的 X terminal 畫面, 以滑鼠右鍵點選, 選擇使用 TTF font, 接著選擇 medium font 或 large font
.. @+node:amd_yen.20130308221230.2484: *4* @url Pythonocc
http://cad-3d.blogspot.tw/2011/10/pythonocc-open-source-interactive-cad.html

使用 @url 的方法為:

左手按住 ctrl, 右手滑鼠選擇 @url node 標題, 然後點擊右鍵
.. @+node:amd_yen.20130308221230.2485: *4* Leo 相關
@@tabwidth

tabwidth 用於內文中的指令, 設定 tabs 的寬度, 負值代表要將 tabs 轉換為幾個空白鍵, 例如 @@tabwidth -4, 表示要用 4 個空白鍵來取代一個 tab.

Ctrl+b 表示要執行節點對應的內文程式, 假如此時滑鼠選擇內文中的某一部分程式, 則 Ctrl+b 將只會執行該選擇範圍內的程式碼(?).

g.es(p.b) # 列出 position 所對應的 body 內文

g.es(p.h) # 列出 position 所對應的 head 標題

Leo 的 iterator

c.all_nodes             # all vnodes in c.

c.all_unique_nodes      # all unique vnodes in c.

c.all_positions         # all positions in c.

c.all_unique_positions  # all unique positions in c.

p.children              # all children of p.

p.following_siblings    # all siblings of p that follow p.

p.nodes                 # all vnodes in p's subtree.

p.parents               # all parents of p.

p.self_and_parents      # p and all parents of p.

p.siblings              # all siblings of p, including p.

p.subtree               # all positions in p's subtree, excluding p.

p.self_and_subtree      # all positions in p's subtree, including p.

p.unique_nodes          # all unique vnodes in p's subtree.

p.unique_subtree        # all unique positions in p's subtree.

設定

p.b = s  # Sets the body text of p.

移動節點

p.moveAfter(v2)           # move p after v2

p.moveToNthChildOf(v2,n)  # move p to the n'th child of v2

p.moveToRoot(oldRoot)     # make p the root position.

# oldRoot must be the old root position if it exists.

p.h = s  # Sets the headline text of p.
.. @+node:amd_yen.20130310161901.1492: *5* 基本操作
Alt+1 可以 toggle autocompleter On/Off
Alt+2 則可以 toggle calltips On/Off

mod_http.py plugin 

這個 plugin 可以讓使用者啟動 http server, 將 Leo Editor 所開啟的 .leo 內容展示在瀏覽器中.

使用步驟:

1. 啟動 mod_http.py - 在 myLeoSetting.py 中, 將 @enable-plugins 內文中的 mod_http.py 前方的 # 拿掉.

2. 重新啟動 Leo, 可以在 log 中顯示 http server 已經啟動, 透過 Leo 所指派的 port 號, 以瀏覽器開啟 Leo 中的大綱檔案.

Body Editor 與 Focus

Cmds 下的功能表有 Body Editor->Add-Editors 可以增加內文編輯區的個數, 此功能在不同節點內容交叉比對時, 有很大的方便, 假如再加上 Focus->Cycle-All-Focus 的輔助, 就能夠在多內文編輯區中交叉切換, 能夠引用或檢視同一節點但是不同區域的內容.

設定外部的編輯器:

在 start_kmol.bat 中設定 LEO_EDITOR 環境變數, 就可以直接在 Leo Editor 中使用.

.. code-block:: none

    REM 設定 Leo 所用的編輯器
    set LEO_EDITOR=%Disk%:\IDE\SciTE\Sc325.exe
.. @+node:amd_yen.20130308221230.2486: *5* 當節點內容更新後
前面的小圖像就會出現黑色邊框

換言之, 當某一節點的前方小圖像出現黑色邊框時, 表示該節點有新的內容尚未儲存.

在 Leo Editor 的術語來說, "the node is dirty".
.. @+node:amd_yen.20130312013510.2090: *5* rst 指令比較
@rst 與 @auto-rst 的用法差異:

@rst 只會在需要利用 Sphinx make html 或 make latex 時才會將下屬的 rst 寫成檔案, 而 @auto-rst 則在 .leo 存檔時, 就會自動將內容轉成 rst 格式, 並且寫檔案.

透過這個差別, 應該就可以在某一課程的下屬節點中, 以 @auto-rst 指令將各週的相關內容, 以 rst 格式進行存檔, 並且在特定 @button 的動作下, 將特定週次的 rst 內容發布到 Wordpress 網誌上.

果若某一特定週次內容更動, 是否可以啟動相同的 Wordpress 發布流程, 以 edit 的方式修改網誌上的內容.

幾個問題必須克服:

更新網誌內容必須設法取得特定網誌的 id

該如何取得此 id, 並與特定週次的發布進行連結

一旦發布 id 與特定節點連結後, 是否每次存檔 Wordpress 可以與 Leo 節點中的資料保持同步.

網誌管理的帳號密碼該如何進行保全?
.. @+node:amd_yen.20130312013510.2055: *5* 節點內容比較
選擇兩個要比較的節點, 將節點內文寫到暫存區, 利用指令開啟比較軟體, 分別開啟兩個節點的內容進行比較.

.. code-block:: python
    :linenos:
    
    selected = c.getSelectedPositions() 
    open('/tmp/a_diff', 'w').write(selected[0].b) 
    open('/tmp/b_diff', 'w').write(selected[1].b) 
    import os 
    os.system("xxdiff /tmp/a_diff /tmp/b_diff &") 

這個概念也可以套用到整個樹狀結構的比較

.. code-block:: python
    :linenos:
    
    def add_text(nd):
        """recursively add to text"""
        text = "\n\n>> " + nd.h
        text += "\n\n%s" % nd.b
        for child in nd.children():
            text += add_text(child)
        return text
    
    selected = c.getSelectedPositions() 
    open('/tmp/a_diff', 'w').write(add_text(selected[0]).encode("utf-8"))
    open('/tmp/b_diff', 'w').write(add_text(selected[1]).encode("utf-8"))
    import os 
    os.system("meld /tmp/a_diff /tmp/b_diff &") 
.. @+node:amd_yen.20130310161901.1490: *5* Leo 程式
The c.all_positions generator returns a list of all positions in the outline. This script makes a list of all the nodes in an outline

.. code-block:: python
    :linenos:
    
    # 依照架構列出整份文件的標題
    for p in c.all_positions():
        indent = '.' * p.level()
        g.es('%s%s' % (indent,p.h))
        
The c.all_unique_positions generator returns a list of all unique positions in the outline.
        
.. code-block:: python
    :linenos:
    
    # 整份文件, 不包括重複標題
    for p in c.all_unique_positions():
        indent = '.' * p.level()
        g.es('%s%s' % (indent,p.h))

p.subtree() 則是節點以下的所有子節點位置, 以下會在 log 區列出所有子節點的內文資料.

.. code-block:: python
    :linenos:
    
    for p in p.subtree():
        g.es(p.b)
.. @+node:amd_yen.20130308221230.2487: *5* @url 有關丟失小圖像
http://markmail.org/message/5uumj36gku53u2t3#query:+page:1+mid:q7jr76g4pmkcftpf+state:results

Missing Leo's headline graphics

問題與 PyQt 的設定有關: startup shortcut pointing to the old distribution, 確定是 Python33 目錄下的 qt.conf 設定必須配合 Python 所在位置修改, i.e. 以下為 qt.conf 的內容, 紀錄 PyQt4 所在的目錄.

[Paths]
Prefix = V:/IDE/Python33/Lib/site-packages/PyQt4
Binaries = V:/IDE/Python33/Lib/site-packages/PyQt4


有關小圖像的意義 (headline icon box):

Blue box: node contains text.
Red vertical bar: node is marked.
Circular arrow: node is cloned.
Outer box is black: node is dirty.
.. @+node:amd_yen.20130308221230.2488: *5* @url 也是有關小圖像
http://en.usenet.digipedia.org/thread/15988/7367/

這是更早之前的討論, 從這裡就可以判定丟失 headline 的小圖像與 PyQt 的設定有關, 也就是 qt.conf 設定必須配合修改.

Python33 目錄下的 qt.conf 設定必須配合 Python 所在位置修改, i.e. 以下為 qt.conf 的內容, 紀錄 PyQt4 所在的目錄.

[Paths]
Prefix = V:/IDE/Python33/Lib/site-packages/PyQt4
Binaries = V:/IDE/Python33/Lib/site-packages/PyQt4
.. @+node:amd_yen.20130308221230.2489: *5* @url Leo scripting 說明
http://leoeditor.com/scripting.html

註:配合將 url 位址改為新的 leoeditor.com

c, g and p

All Leo scripts run with the execute-script command (Ctrl-B) have access to the following three predefined objects:

c is the commander of the outline containing the script.
g is Leo's leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.

The predefined c, g and p variables give full and easy access to all the data in your outlines, as well as hundreds, if not thousands, of useful Python functions in Leo's core. These variables define an easy-to-use DOM (Document Object Model) through which you can get o set any data in your outlines. The hello world example is:

for p in c.all_positions():
    indent = '.' * p.level()
    print('%s%s' % (indent,p.h))
    
以上程式會以階層式 (以 . 點數區分)列出大綱標題
    
Here, c.all_positions() delivers a list of positions, and p.level() and p.h deliver the indentation level and head string of position p.

g

The predefined object g is the leo.core.leoGlobals module. This module contains several dozen utility functions and classes.

g.app

g.app is the application object representing the entire Leo application. The instance variables (ivars) of g.app represent Leo's global variables.

commander

Commanders represent all aspects of a single Leo window. For any commander c, c.p is the presently selected position (see below), and c.rootPosition() is the root (first) position in the outline. Given c, Leo scripts can gain access to all data present while Leo is running, including all of Leo's classes, functions and data.

position

The predefined object p is the position of the presently selected node. Positions represent locations in Leo outlines. For any position p, p.v is the vnode at that position.

vnode

A vnode represents a single outline node. Because of clones, a vnode may appear in several places on the screen. Vnodes hold most of the data in Leo outlines. For any vnode v, v.h is the node's headline, and v.b is the node's body text. As a convenience, for any position p, p.h and p.b are synonyms for p.v.h and p.v.b.

g.es writes to the log pane

The g.es method prints its arguments to the Log tab of the log pane:

g.es("Hello world")

g.es converts non-string arguments using repr:

g.es(c)

g.es prints multiple arguments separated by commas:

g.es("Hello","world")

To create a tab named "Test"or make it visible if it already exists:

c.frame.log.selectTab('Test')

When first created, a tab contains a text widget. To write to this widget, add the tabName argument to g.es:

將訊息寫進上面在 log 區域所建立的 Test tab

g.es('Test',color='blue',tabName='Test')

.. @+node:amd_yen.20130308221230.2490: *5* @url Leo 寫檔案指令比較
http://leoeditor.com/directives.html
.. @+node:amd_yen.20130317160119.1722: *5* @url 建立中間檔案備用
https://groups.google.com/forum/?fromgroups=#!msg/leo-editor/_dX4UkRJDOc/iIzSaJYT1_oJ

當使用者要利用 Leo Editor 相關節點內容, 轉進其他系統 (例如: Wordpress 或 CMSimple) 時, 就會需要執行這些程式碼.

at = c.atFileCommands 
p = c.currentPosition() # get the current position 
fileName = p.atAutoNodeName() 
at.readOneAtAutoNode(fileName,p) 

有關

p.headString() and  p.bodyString()

以及

p = g.findNodeAnywhere(c,headline) and/or
p = g.findNodeInTree(c,p,headline) 

還有

c.executeMinibufferCommand('open-outline') 
.. @+node:amd_yen.20130318140025.1550: *5* Leo 執行問題
在內容搜尋時發生以下錯誤:

File "V:\IDE\Python33\lib\site-packages\leo\core\leoFind.py", line 1355, in showSuccess

assert w.getAllText() == p.b

AssertionError

目前無解決方法.

針對 leo\plugins\qtGui.py 中 color_theme 的設定, 必須進行下列修改, 否則 Leo 無法啟動:

.. code-block:: python

    def __init__ (self):

        # Initialize the base class.
        leoGui.leoGui.__init__(self,'qt')
        # g.trace('(qtGui)',g.callers())
        self.qtApp = QtGui.QApplication(sys.argv)
        self.bodyTextWidget  = leoQtBaseTextWidget
        self.iconimages = {}
        self.plainTextWidget = leoQtBaseTextWidget
        self.mGuiName = 'qt'
        
        # 錯誤訊息為 g.app.config 根本沒有 getString 方法
        if g.app.config:
            self.color_theme = g.app.config.getString('color_theme')
        else:
            self.color_theme = "Default"
.. @+node:amd_yen.20130411211147.2088: *5* Leo 的 home
在 start.bat 中設定

set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home

可以指令 Leo Editor 開啟時的 home 路徑, 其中必須要有 .leo 目錄, 且指定 .leoID.txt

workbook.leo 也是位於 .leo 目錄中.
.. @+node:amd_yen.20130308221230.2491: *4* git 相關
基本設定:

.. code-block:: none

    git config --global user.name "使用者名稱"
    git config --global user.email "username@email.com"
    git config --global http.proxy %HTTP_PROXY%
    $http_proxy 設定連線用 proxy server

git clone https://github.com/chiamingyen/mdeCourse.git

就可以將 mdeCourse 複製到 local 端

修改後就可以利用

.. code-block:: none

    git add .
    git commit -m "my commit"
    git push

將資料更新到 remote 端

利用 git 下載特定 branch 版本資料:

git clone -b R38 https://chiamingyen@git.code.sf.net/u/chiamingyen/pythoncad

可以指定 clone branch R38 版本
.. @+node:amd_yen.20130311141127.1492: *4* Sphinx 相關
Sphinx 與 Python3 的配合, 在使用 extensions = ['sphinx.ext.graphviz'] (conf.py 中的設定) 時, 必須要修改 V:\IDE\Python33\Lib\site-packages\sphinx\ext 目錄下的 graphviz.py 122 ~ 126 行, 主要原因是 Python3 的 string 為 utf-8 編碼.

.. code-block:: python
    :linenos:
    
    def render_dot(self, code, options, format, prefix='graphviz'):
        """Render graphviz code into a PNG or PDF output file."""
        hashkey = (code+ str(options) + \
                  str(self.builder.config.graphviz_dot) + \
                  str(self.builder.config.graphviz_dot_args)).encode("utf-8")
                  
在 Sphinx 中使用 graphviz 指令的步驟:

1. 確定有 dot.exe (這裡是從 Simple Groupware 的 win32 binary 安裝中擷取.

2. 在 conf.py 設定中, 將 sphinx.ext.graphviz 加入 extensions=[].

3. 確定 sphinx\ext\graphviz.py 為 Python3 相容.

4. 在 rst 內文中, 使用 .. graphviz:: 指令.

參考資料:

https://bitbucket.org/birkenfeld/sphinx/src/8f0aca73d1b0/sphinx/ext/graphviz.py
.. @+node:amd_yen.20130311171454.1493: *5* LaTeX 字型
只要將 ``*.ttf`` 放入下列目錄

V:\extensions\portableLatex\MiKTeX\texmf-local\fonts\truetype\cct

然後利用 fc-list > font.txt 查驗字型名稱是否載入, 一旦載入後就可以在 conf.py 中設定使用.

目前系統中放置重複的 ttf 檔案

V:\extensions\portableLatex\MiKTeX\texmf-local\fonts\truetype\cct\wqy_zenhei.ttf

V:\extensions\sgw\bin\lib\artichow\font\wqy_zenhei.ttf

目前位於 V:\extensions\portableLatex\MiKTeX\texmf-local\fonts\truetype\cct 目錄下共有中文字型檔案:

fireflysung.ttf 文鼎 P L 新宋 (15 MB)

arplbaosong2gbklt.ttf 文鼎ＰＬ报宋二GBK (16 MB)

simhei.ttf SimHei (10MB)

目前 portableLatex 所支援的中文字型:

以 fc-list :lang=zh > font.txt 取得

PMingLiU,新細明體:style=Regular

New Gulim,새굴림:style=Regular

NSimSun,新宋体:style=Regular

cwTeXHeiBold,cwTeX 粗黑體:style=Medium

AR PL New Sung,文鼎ＰＬ新宋:style=Regular

SimSun,宋体:style=Regular

AR PLBaosong2GBK Light,文鼎ＰＬ报宋二GBK:style=Regular

cwTeXFangSong,cwTeX 仿宋體:style=Medium

SimHei,黑体:style=Regular

cwTeXMing,cwTeX 明體:style=Medium

cwTeXKai,cwTeX 楷書:style=Medium

MingLiU,細明體:style=Regular

cwTeXYen,cwTeX 圓體:style=Medium

中文字型設定

\usepackage[BoldFont,CJKchecksingle]{xeCJK} % 表示要將中文字型與英文字型分開設置

\usepackage[T1]{fontspec}    %表示隨後要自行設定字型

設定英文字型為 Times New Roman

\setsansfont{Times New Roman}

\setmainfont{Times New Roman}

\setmonofont{Times New Roman}

將中文字型設為 SimHei

\setCJKsansfont[BoldFont={SimHei},ItalicFont={SimHei}]{SimHei}

\setCJKromanfont[BoldFont={SimHei},ItalicFont={SimHei}]{SimHei}

\setCJKmainfont[BoldFont={SimHei},ItalicFont={SimHei}]{SimHei}

\setCJKmonofont[BoldFont={SimHei},ItalicFont={SimHei}]{SimHei}
.. @+node:amd_yen.20130311171454.4514: *5* 數學方程式
Sphinx 支援直接在 rst 內容中輸入數學方程式, 由於 Sphinx 可以將 rst 轉為 html 與 pdf, 因此在 extension 部分必須分別啟動 'sphinx.ext.pngmath' 與 'sphinx.ext.mathjax', 而 pngmath 必須配合

make.bat 中的 pngmath_latex 設定, 指向 MiKTeX 的 latex.exe 路徑.

.. code-block:: none

    set SPHINXBUILD=sphinx-build
    set SPHINXOPTS=-D pngmath_latex="V:\extensions\portableLatex\MiKTeX\texmf\miktex\bin\latex.exe"

接著就可以使用 .. math:: 指令, 在 rst 內容中導入 LaTeX 格式的數學方程式.

啟動 sphinx.ext.pngmath 延伸程式主要讓 LaTeX 將數學方程式轉為 png 圖檔, 而 sphinx.ext.mathjax 則配合在 html 轉換後, 加入 mathjax.js 的支援, 讓使用者在瀏覽器中檢視對應的數學方程式.

使用 .. raw:: latex 可以直接輸入 LaTeX 相關語法的內容.
.. @+node:amd_yen.20130311171454.1494: *5* 區別 html 與 latex 內容
.. only:: latex

   這裡的內容只會出現在 LaTeX 輸出.

.. only:: html

   這裡的內容只會出現在 html 輸出.
.. @+node:amd_yen.20130318140025.1552: *5* @url 中文 Sphinx 最完整案例
http://hyry.dip.jp:8000/pydoc/index.html

目前使用 Python Sphinx 製作電子書, 且支援中文搜尋的應該就是`用 Python 做科學計算`_ , 其中有關編寫工具與環境的搭建有部分說明.

portableKMOL 已經將上述環境改為 Python3 且支援 `結巴分詞`_ 套件, 但是所產生的結果仍有部分中文關鍵字無法正確搜尋, 目前承接 Sphinx html 的方案應該仍以 CMSimple 模式最佳.

目前 mdeCourse 中採用 `結巴分詞`_ 套件中的全模式分詞.

.. _用 Python 做科學計算: http://hyry.dip.jp:8000/pydoc/index.html

.. _結巴分詞: https://github.com/fxsjy/jieba
.. @+node:amd_yen.20130312013510.1496: *4* matplotlib 相關
讓 matplotlib 可以使用中文

將字型檔案放到

V:\IDE\Python33\Lib\site-packages\matplotlib\mpl-data\fonts\ttf\

系統配置文件

V:\IDE\Python33\Lib\site-packages\matplotlib\mpl-data\matplotlibrc

用戶配置文件

c:\Documents and Settings\%UserName%\.matplotlib\matplotlibrc

修改

將 font.family 改為 monospace.

font.monospace 則設為對應的中文字型名稱.
.. @+node:amd_yen.20130309155804.1713: *4* OpenShift 相關
.openshift 中的內容

.. code-block:: none
    :linenos:

    # The OpenShift server to connect to
    libra_server="openshift.redhat.com"
    
    # Your OpenShift login name
    default_rhlogin="your_account@yourdomain"
    
    # The default timeout for network operations
    #timeout=<integer>
    
    # If true, certificate errors will be ignored.
    # WARNING: This may allow others to eavesdrop on your communication with OpenShift.
    #insecure=<boolean>
    
    # The SSL protocol version to use when connecting to this server
    #ssl_version="<string>"
    
    # A client certificate file for use with your server
    #ssl_client_cert_file="<path_to_file>"
    
    # A file containing CA one or more certificates
    #ssl_ca_file="<path_to_file>"
    
利用 rhc 下載位於 OpenShift 的 Application 資料

.. code-block:: none

    rhc snapshot save -a yourapplication
    
有關 rhc 的安裝, 請參考 "rhc 的安裝" 章節說明.

至於 OpenShift 上的應用程式與客製 domain name 的綁定:

執行下列 rhc 指令, 就可以為 yourapplication 指定一個別名 your.custom.domain

.. code-block:: none

    rhc alias add yourapplication your.custom.domain
 
執行完成後, 就可以在 OpenShift 的全球資訊網伺服器設定中, 將 yourapplication 應用程式新增一組別名 (alias) 綁定.
 
至於要讓此別名能夠實際在 DNS 系統中發揮作用, 使用者只要在 your.custom.domain 主機所對應的 DNS 設定中 (即負責掌管 custom.domain 的 DNS server 設定中), 新增:
 
your    CNAME    yourapplication-yournamespace.rhcloud.com

然後增量 serial number 後, 重新啟動 DNS server, 就可以利用 your.custom.domain 連結到上述應用程式.
.. @+node:amd_yen.20130309155804.1714: *5* rhc 的安裝
The OpenShift Client tools known as rhc are built and packaged using the Ruby programming language. OpenShift integrates with the Git version control system to provide powerful, decentralized version control for your application source code.

OpenShift rhc can be run on any operating system with Ruby 1.8.7 or higher if you have the requisite user permissions to install programs. Instructions for specific operating systems are provided below. It is assumed that you are running the commands from a command line window, such as Command Prompt, or Terminal. If you are using Ruby Version Manager (rvm) see the instructions below.

Windows

RubyInstaller 1.9 provides the best experience for installing Ruby on Windows XP, Vista, and Windows 7. Download the newest version from the download page and launch the installer.

Important: During the installation you can accept all of the defaults, but it is mandatory that you select the "Add Ruby executables to your PATH" check box in order to run Ruby from the command line.

After the installation is completed, to verify that the installation is working run:

C:\Program Files\> ruby -e 'puts "Welcome to Ruby"'

Welcome to Ruby

If the 'Welcome to Ruby' message does not display, the Ruby executable may not have been added to the path. Restart the installation process and ensure the "Add Ruby executables to your PATH" check box is selected.

Installing Git

The next step is to install Git for Windows so that you can synchronise your local application source and your OpenShift application. Git for Windows offers the easiest Git experience on the Windows operating system and is the recommended default - if you use another version of Git please ensure it can be executed from the command line and continue to the next section.

Download and install the latest version of Git for Windows. Ensure that Git is added to your PATH so that it can be run from the command line. After the installation is completed, to verify that Git is correctly configured run:

C:\Program Files\> git --version

git version 1.7.11.msysgit.1

Installing the OpenShift gem

After Ruby and Git are correctly installed, use the RubyGems package manager (included in Ruby) to install the OpenShift client tools. Run:

C:\Program Files\> gem install rhc

RubyGems downloads and installs the rhc gem from www.rubygems.org/gems/rhc. The installation typically proceeds without errors. After installation is complete, run:

C:\Program Files\> rhc

The OpenShift interactive setup wizard displays and prompts you to complete the rest of the process. If you cannot run OpenShift client tools at this point, please contact us on IRC or post in our forums for more assistance.
.. @+node:amd_yen.20130322213429.1578: *5* 開發 pyforum
以下為直接在 OpenShift 平台上開發 pyforum 的流程:

- 登錄一個帳號

- 利用 community Python 3.3 建立一個應用程式

- 利用 git clone 將基本程式架構下載到 local 端

- 修改 setup.py, 加入 cherrypy, moko 與 pybean (注意: pybean 0.2.1 與 0.1.2 版本不相容, 0.1.2 使用 uuid, 而 0.2.1 則使用整數 index) 的模組安裝

修改後的 setup.py 程式:

.. code-block:: python

    from setuptools import setup
    
    setup(name='YourAppName', version='1.0',
          description='OpenShift Python-3.3 Community Cartridge based application',
          author='Your Name', author_email='ramr@example.org',
          url='http://www.python.org/sigs/distutils-sig/',
    
          #  Uncomment one or more lines below in the install_requires section
          #  for the specific client drivers/modules your application needs.
          install_requires=['WebOb','cherrypy','mako','pybean',
                            #  'mysql-connector-python',
                            #  'pymongo',
                            #  'psycopg2',
          ],
         )

- 放入下列基本測試程式:

.. code-block:: python

    #coding: utf-8
    import cherrypy, os
    
    class HelloWorld(object):
        def index(self):
            return "這是一個 Cherrypy 網際程式!!"
        index.exposed = True
     
    # IP 與埠號使用 OpenShift 內定值
    #cherrypy.server.socket_port = 8083
    #cherrypy.server.socket_host = '127.0.0.1'
    application = cherrypy.Application(HelloWorld())
    
- 導入 mako 模組並且進行套稿測試:

.. code-block:: python

    #coding: utf-8
    import cherrypy, os
    from mako.template import Template
    
    class HelloWorld(object):
        def index(self):
            # 蓋掉第一階段的傳回測試
            #return "這是一個 Cherrypy 網際程式!!"
            return (Template("使用 mako 套稿引擎:${data}!").render(data="目前沒有問題!"))
        index.exposed = True
     
    # IP 與埠號使用 OpenShift 內定值
    #cherrypy.server.socket_port = 8083
    #cherrypy.server.socket_host = '127.0.0.1'
    application = cherrypy.Application(HelloWorld())
    
- 假如要改用套稿檔案的方式處理, 則必須將套稿寫進檔案, 然後在 render 時導入

.. code-block:: python

    #coding: utf-8
    import cherrypy, os
    from mako.template import Template
    
    class HelloWorld(object):
        def index(self):
            # 蓋掉第一階段的傳回測試
            #return "這是一個 Cherrypy 網際程式!!"
            # 再蓋掉基本套稿測試
            #return (Template("使用 mako 套稿引擎:${data}!").render(data="目前沒有問題!"))
            mytemplate = Template(filename=os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/mytmpl.txt")
            return mytemplate.render(data="目前沒有問題!")
        index.exposed = True
     
    # IP 與埠號使用 OpenShift 內定值
    #cherrypy.server.socket_port = 8083
    #cherrypy.server.socket_host = '127.0.0.1'
    application = cherrypy.Application(HelloWorld())
    
而 mytmpl.txt 檔案內容為 utf-8 資料, 必須在標頭宣告.


.. code-block:: python

    ##encoding: utf-8
    ## 兩個 pound signs 在 Mako 語法中為註解行
    ## 多行註解則使用
    <%doc>
        這是註解
        使用 <%! %> 表示在模組層次運作的 Python 程式碼, 可以用來 import 模組或定義相關的函式或物件
    </%doc>
    在套稿中的基本語法為 html <br /><br />
    目前的套稿檔案位於: os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static/templates/mytmpl.txt"
    <br />
    以下資料從檔案套稿傳回:<br />
    
    使用 mako 套稿引擎:${data}!

- 假如運用 CherryPy 的 tools 格式來定義 mako templates 所在目錄, 可以採用 decorator 格式處理套稿引用

applicaiton 程式碼:

.. code-block:: python

    #coding: utf-8
    import cherrypy, os
    # 導入 Template 與 TemplateLookup
    from mako.template import Template
    from mako.lookup import TemplateLookup
    
    # 以下為 tools.mako.directories 的程式碼
    class MakoHandler(cherrypy.dispatch.LateParamPageHandler):
        """Callable which sets response.body."""
        
        def __init__(self, template, next_handler):
            self.template = template
            self.next_handler = next_handler
        
        def __call__(self):
            env = globals().copy()
            env.update(self.next_handler())
            return self.template.render(**env)
    
    class MakoLoader(object):
        
        def __init__(self):
            self.lookups = {}
        
        def __call__(self, filename, directories, module_directory=None,
                     collection_size=-1):
            # Find the appropriate template lookup.
            key = (tuple(directories), module_directory)
            try:
                lookup = self.lookups[key]
            except KeyError:
                lookup = TemplateLookup(directories=directories,
                                        module_directory=module_directory,
                                        collection_size=collection_size,
                                        )
                self.lookups[key] = lookup
            cherrypy.request.lookup = lookup
            
            # Replace the current handler.
            cherrypy.request.template = t = lookup.get_template(filename)
            cherrypy.request.handler = MakoHandler(t, cherrypy.request.handler)
    
    main = MakoLoader()
    cherrypy.tools.mako = cherrypy.Tool('on_start_resource', main)
    # 以上結束 cherrypy.tools.mako 的程式碼
    
    class HelloWorld(object):
        _cp_config = {
        # 配合 utf-8 格式之表單內容
        # 若沒有 utf-8 encoding 設定,則表單不可輸入中文
        'tools.encode.encoding': 'utf-8',
        # 加入 session 設定
        'tools.sessions.on' : True,
        'tools.sessions.storage_type' : 'file',
        'tools.sessions.locking' : 'explicit',
        # 可以利用 .openshift\action_hooks 中執行 shell command 的方式來建立 tmp 目錄
        'tools.sessions.storage_path' : os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/tmp",
        # 內定的 session timeout 時間為 60 分鐘
        'tools.sessions.timeout' : 60,
        # 以下透過  @cherrypy.tools.mako(filename="mytmpl.txt") decorator 設定的套稿目錄依據
        'tools.mako.directories' :  os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static/templates"
        }
    
        @cherrypy.expose
        @cherrypy.tools.mako(filename="mytmpl.txt")
        def index(self):
            # 配合 mako 傳回 dictionary 格式資料
            return {"data":"目前沒有問題!"}
     
    # 靜態檔案的目錄對應設定
    myconfig = {'/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.root': os.environ['OPENSHIFT_DATA_DIR'],
        'tools.staticdir.dir': 'downloads',
        'tools.staticdir.index' : 'index.html'
        },
        # 設定靜態 templates 檔案目錄對應
        '/templates':{
        'tools.staticdir.on': True,
        'tools.staticdir.root': os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static",
        'tools.staticdir.dir': 'templates',
        'tools.staticdir.index' : 'index.html'
        }
    }
    
    # IP 與埠號使用 OpenShift 內定值
    #cherrypy.server.socket_port = 8083
    #cherrypy.server.socket_host = '127.0.0.1'
    application = cherrypy.Application(HelloWorld(), config=myconfig)
    
mytmpl.txt 套稿內容:

.. code-block:: python

    ##encoding: utf-8
    ## 兩個 pound signs 在 Mako 語法中為註解行
    ## 多行註解則使用
    <%doc>
        這是註解
        使用 <%! %> 表示在模組層次運作的 Python 程式碼, 可以用來 import 模組或定義相關的函式或物件
    </%doc>
    <html>
            <head>
                    <title>Cherrypy Mako 表單測試</title>
            </head>
            <body>
    <style type="text/css" media="all">
    @import "templates/style/base.css";
    </style>  
    在套稿中的基本語法為 html <br /><br />
    目前的套稿檔案位於: os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static/templates/mytmpl.txt"
    <br />
    以下資料從檔案套稿傳回:<br />
    
    使用 mako 套稿引擎:${data}!
    
            </body>
    </html>
.. @+node:amd_yen.20130322213429.1579: *6* pyforum 教學
程式語言(二)將著重在此一網際 Python3 程式的開發, 基本目的:

- 可以利用 Python3, CherryPy, mako, SQLite 著手開發一個網際機械設計流程框架

此框架具有下列目標:
  
1. 可用來執行機械零組件細部設計與分析 (材料資料庫物件, 破壞理論物件, 機械元件設計物件, CAE 分析物件等).

2. 可結合 Javascript, 以 Pro/Web.Link 格式完成"可程式化"零件與組件的參數繪圖.

3. 可結合 OpenCascade 核心程式, 建構網際的機構動態模擬系統所需的參數化零組件檔案 (底層的機構分析與最佳化設計採用 C/C++ 或 Python 演化套件完成).

4. 可結合 HTML 與 STL 零組件格式, 進行網際動態模擬.
.. @+node:amd_yen.20130318140025.1551: *4* beautiful soup 相關
而 `beautiful soup`_ 的基本用法:

.. _beautiful soup: http://www.crummy.com/software/BeautifulSoup/bs4/doc/

.. code-block:: python

    from bs4 import BeautifulSoup
    html_doc = '''某段超文件內容'''
    soup = BeautifulSoup(html_doc)
    
    soup.title
    # <title>The Dormouse's story</title>
    
    soup.title.name
    # u'title'
    
    soup.title.string
    # u'The Dormouse's story'
    
    soup.title.parent.name
    # u'head'
    
    soup.p
    # <p class="title"><b>The Dormouse's story</b></p>
    
    soup.p['class']
    # u'title'
    
    soup.a
    # <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>
    
    soup.find_all('a')
    # [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
    #  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
    #  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
    
    soup.find(id="link3")
    # <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>

基本產生 CMSimple 與 Wordpress 內容的流程 (`graphviz 的節點形狀`_):

.. _graphviz 的節點形狀: http://www.graphviz.org/doc/info/shapes.html

.. graphviz:: 

    digraph{
    node[fontname="中文", shape=rect]
    "由 Leo 針對特定節點內容轉為 singlehtm"->"使用 beautiful soup 整理 html"->"以 SFTP 傳到 CMSimple 網站"
    "使用 beautiful soup 整理 html"->"以 xmlrpc 傳到 Wordpress 網站"
    }
.. @+node:amd_yen.20130319204150.1564: *4* Brython 相關

`Brython`_ 是一個嘗試利用 Python 語法編寫 Html5 程式功能的專案, 其做法就是透過 Javascript 作為底層, 讓網頁上的 Python 程式能夠在執行時轉為 Javascript, 如此的優勢在於可以讓伺服器端的 Python 程式碼與客戶端中的 Python 程式保有一致的風格外, 網際化的程式環境也有機會讓使用者決定要在伺服器端或客戶端執行特定的 Python 程式模組 (必須處理網路安全疑慮問題).

就分散式的程式架構而言, 所謂客戶端的程式執行可以讓特定的程式充分運用個別客戶端電腦的 cpu 或圖形介面卡 (PyCUDA + mpi4py), 好處在於無需提供特大的伺服器, 只要將程式打包送到客戶端執行即可, 而從伺服器發送這些程式的好處則在於容易進行版次控管, 每一位連線的用戶, 都可以使用最新的程式, 沒有客戶端安裝程式版次差異所造成的問題.

.. _Brython: https://code.google.com/p/brython/
.. @+node:amd_yen.20130320201815.1565: *4* Cloud9 IDE 相關
進入程式編輯區後, 使用 Alt+t 就會帶出 Terminal

在 Cloud9 中使用 django (under python 2.6)

    After some research and looking for an answer on different blogs and sites I finally found a solution:
    
    Create a new workspace Execute: easy_install django to install Django
    
    Create new Django project: python ./../bin/django-admin.py startproject myproject
    
    Start dev server: python ./myproject/manage.py runserver $OPENSHIFT_INTERNAL_IP:$PORT
    
    Access http://projectname.username.c9.io 
    
    Let's get started!

在 Cloud9 使用 virtualenv

    Virtualenv is a great way is a tool to create isolated Python environments. Sometimes easy_install or pip fail because they try to write to directories not owned by you. In this case running those commands from a virtualenv will fix it. To get virtualenv working in Cloud9 you need to delete the default distutils file .pydistutils.cfg first.
    
    To initialize a virtualenv run from the terminal
    
    $ rm ../.pydistutils.cfg 
    $ virtualenv {{ project name }}-env
    $ source {{ project name }}-env/bin/activate  
    
    If you come back to your workspace after a while or if you open a new terminal window you need to reactivate the virtualenv
    
    source {{ project name }}-env/bin/activate

在 Cloud9 安裝 Python3 (並非完整的 Python3.3)

    Q: Can you support Python 3?
    
    A: It is not installed by default, but you can install it by opening a terminal and typing:  'c9pm install python33'. 

.. @+node:amd_yen.20130320201815.1566: *5* @url cloud9 github
https://github.com/ajaxorg/cloud9

憑藉著網路上許多開發的程式方案, Cloud9 團隊將其整合成網際 IDE 環境, 目前架構在 OpenShift 之上, 而 OpenShift 則是架構在 Amazon 的雲端基礎架構之上.

開源的 Node.js 造就了 Cloud9 IDE 的發展, 而 Cloud9 一點也不吝嗇, 直接就將程式的原始碼公佈在 github 上 (因此只有如此, 才能吸引來自全球的菁英協助除錯, 並且貢獻價值).

這些二十一世紀的數位創業家, 憑藉自身的努力, 在各種開放環境中構築自己的夢想產品, 之所以將這些成果原原本本攤開, 主要的原因是這些程式界的菁英先前就是被 Node.js 的開放而啟發出 Cloud9, 現在他們更要利用開放創新構築下一階段的價值.

問題是, 層層堆疊的技術創新, 其中有很大一部分免費開放給來自全球的用戶試用, 到底是誰來買單?

可能的答案是: 未來的機會在買單.

這些金主 (創投) 願意現在出錢來維繫這免費試用背後龐大的開銷, 目的就是購買未來發展機會的價值, 一旦  Cloud9 + OpenShift + Amazon 基礎建設的產品上市, 這些創投就可以天文倍數回收了.
.. @+node:amd_yen.20130320201815.1574: *5* @url 隨身伺服器
http://ericterpstra.com/tag/cloud9/
.. @+node:amd_yen.20130321213622.1575: *4* TCExam 有關
TCExam 對使用者密碼編碼採用 shared/code/tce_functions_session.php 程式中的 getPasswordHash 函式:

.. code-block:: php

    function getPasswordHash($password) {
        if (defined('K_STRONG_PASSWORD_ENCRYPTION') AND K_STRONG_PASSWORD_ENCRYPTION) {
            $pswlen = strlen($password);
            $salt = (2 * $pswlen);
            for ($i = 0; $i < $pswlen; ++$i) {
                $salt += (($i + 1) * ord($password[$i]));
            }
            $hash = '$'.$salt.'#'.strrev($password).'$';
            return md5($hash);
        }
        return md5($password);
    }
    
因此, 若 K_STRONG_PASSWORD_ENCRYPTION 定義為真, 則將採用更複雜的編碼 (MySQL 中所沒有的編碼流程), 否則使用 md5() 編碼.

TCExam 的強制 SSL 連線設定:

若要利用 Javascript 強制 TCExam 進行 /admin/ 連線時使用 SSL, 可以在 admin/code/tce_page_header.php 中加入下列程式碼:

.. code-block:: javascript
    
    $forSSL = <<< EOF
    <script type="text/javascript">
    if(window.location.protocol != "https:")
    window.location.href = "https:" + window.location.href.substring(window.location.protocol.length);
    </script>
    EOF;
    echo $forSSL;

假如要連 public/code/index.php 的連線 (一般用戶) 也強制採用 SSL, 則將上述 Javascript 放入 public/code/tce_page_header.php 中.

TCExam 安裝設定:

- 執行 /install/install.php, 並完成 MySQL 資料庫 (也可以採用 Oracle 與 PostgreSQL) 連線設定.

- 安裝完畢後, 刪除 install 目錄.

- 採用內建設定安裝後, 管理者帳號為 admin, 密碼為 1234, 使用者的權限則為最高的 level 10 (任何 level 10 的用戶都是管理者).

- 對 fresh MySQL 儲存備份.

使用者的 levels 區分:

.. code-block:: none

    TCExam has 10 predefined user's levels:
    0 = anonymous user (not registered).
    1 = basic user (registered);
    2-9 = configurable/custom levels;
    10 = administrator with full access rights

以下為相關使用注意要項:

- 已經用於考試的題目, 不可進行更改.

考慮目前版次的適用性,  或者設法進行修改.

- 最基本的三個資料表 (安裝後有內容的資料表)

.. code-block:: none

    tce_users - 基本用戶資料表
    tce_user_groups - 基本分組資料表
    tce_usrgroups - 基本使用者套用分組資料表

- 使用基本流程

.. code-block:: none

    修改 shared/config/tce_user_registration.php 檔案中的設定, 決定使用者如何登錄帳號
    shared/config/tce_user_registration.php 中的　K_USER_ENABLED 設為 false, 則不允許使用者自行註冊帳號.
    使用者登錄帳號後, 建立班級群組, 將所登錄的帳號設定到所屬班級
    使用者進行模擬測驗
    使用者進行實際考試
    考後流程檢討

- LaTeX 使用安裝

.. code-block:: none

    利用 sudo apt-get install texlive-full 安裝完整版本的 LaTeX /usr/bin/latex.
    利用 sudo apt-get install imagemagick 安裝影像轉換程式 /usr/bin/convert.
    利用 sudo apt-get install ghostscript 安裝 /usr/bin/dvips.
    利用以下標註語法測試 LaTeX 是否安裝成功.
    [tex]\alpha+\beta[/tex]

- 防火牆設置

.. code-block:: none

    1. 安裝 Ubuntu 12.10 伺服器操作系統, 其中包括 LAMP, Bind9, OpenSSH, ApacheDS, Stunnel 等.
    2. 利用 ufw 設定 相關防火牆設定, 讓資料庫主機可以讓前台主機擷取, 前台可以讓客戶電腦連線等.

例如: 要將連線限縮在電腦教室

防火牆設定 (相關設定最好直接在伺服器上執行, 以免讓遠端主機在設定啟用後無法連線):

ufw 參考: https://help.ubuntu.com/community/UFW

查驗 ufw 是否啟用

.. code-block:: none

    sudo ufw status verbose

啟用 ufw

.. code-block:: none

    sudo ufw enable

對特定 IP 開啟特定應用程式

.. code-block:: none

    sudo ufw allow from 140.130.17.xx app OpenSSH
    sudo ufw allow from 140.130.17.xx app Apache
    sudo ufw allow from 140.130.17.xx app MySQL
    sudo ufw allow from 140.130.17.xx app ApacheDS

- 在 Ubuntu 安裝過程使用 http-proxy

.. code-block:: none

    sudo vi /etc/environment
    在檔案中加入
    http_proxy="http://your.proxy.server:3128/"
.. @+node:amd_yen.20130322213429.1577: *5* TCExam 評分
MCSA (Multiple Choice Single Answers)
單選題目

For each question the possible scores are:
針對每一題目可能的得分為::

    true option selected = [question right score] = [test basic points] * [question difficulty]
    
    選擇正確的選項 = 答對題目給分 = 考試基本分*問題困難度

    false option selected = [question wrong score] = [test points for wrong answer] * [question difficulty]
    
    選擇錯誤的選項 = 答錯題目給分 = 考試答錯給分*問題困難度

    no option selected = [question unanswered score] = [test points for no answer] * [question difficulty]
    
    沒有選擇 = 未作答題目給分 = 未作答給分*問題困難度

MCMA (Multiple Choice Multiple Answers)
複選題目

On MCMA questions, each individual alternative answer can be considered as an independent true/false question.

就複選題目, 每一個獨立選項可作為獨立是非題目

For each question the maximum scores are:

針對每一題目, 最大得分為::

    [question max right score] = [test basic points] * [question difficulty]
    
    答對問題最大得分 = 考試基得分*問題困難度

    [question max wrong score] = [test points for wrong answer] * [question difficulty]

    答錯題目最大得分 = 考試答錯得分*問題困難度

    [question max unanswered score] = [test points for no answer] * [question difficulty]
    
    未答題目最大得分 = 未作答得分*問題困難度

For each individual answer the possible scores are:

針對每一單獨答題可能得分::

    [answer right score] = [question max right score] / [number of alternative answers]

    答對題目得分 = 答對問題最大給分/選項數目

    [answer wrong score] = [question max wrong score] / [number of alternative answers]

    答錯題目得分 = 答錯題目最大得分/選項數目

    [answer unanswered score] = [question max unanswered score] / [number of alternative answers]

    未答題分數 = 未答題目最大得分/選項數目

The possible scores for each option are:

每一選項可能得分::

    false option set as false = [answer right score]
    
    錯誤的選項設為錯 = 答對題目得分 

    false option set as true = [answer wrong score]
    
    錯誤選擇設為對 = 答錯題目得分

    false option not answered = [answer unanswered score]
    
    錯誤的選項未作答 = 未答題分數

    true option set as true = [answer right score]
    
    正確的選項設為對 = 答對題目得分 

    true option set as false = [answer wrong score]
    
    正確的選項設為錯  = 答錯題目得分

    true option not answered = [answer unanswered score]
    
    正確的選項未作答 = 未答題分數

If the "partial score for MCMA" option is set, then the sum of the above scores for all answers gives you the final question score. 
若考試設定為"複選題部分給分", 則上述所有題目給分總和就是最後答題的分數.

TCExam consider an MCMA question as right if you score more than 50% of [question max right score]. 
TCExam 評定複選題目只要分數超過"答對問題最大給分"的一半以上就算答對該題目.

If the "radiobuttons for MCMA" option is unchecked, then unanswered questions are always considered marked as false, so the test-taker always get a score even not anwering (normally 50% of the score if the right and wrong answers are balanced).
當複選題選項未作答時, 該未答題目一律視為選擇"錯誤", 在這種情形下應試者即便沒有作答也會拿到該題的分數 (當錯的選項與對的選項各半的時候, 就會拿到一半的分數).

If the "partial score for MCMA" option is unset, then the final question score will be equal to [question max right score] only if the maximum score is reached, otherwise the [question max wrong score] or [question max unanswered score] is assigned.
假如未選用"複選題部分給分", 那麼只有在拿到最大得分時, 最後答題得分才會等於'答對問題最大給分', 否則該題得分就會設為"答錯題目最大得分"或"未答題目最大得分"

因此在 TCExam 系統中出題目時, 基本策略為:

- 若希望在出題時選擇"複選題部分給分", 就必須同時對未答題與答錯題的選項予以倒扣分數, 否則應試者就可能採選擇每一題目的所有選項而取分 (若不倒扣).

- 在複選題採"複選題部分給分"時, 必須同時對不答題者給予答錯題目相同的倒扣分數, 否則應試者將投機選擇全部不作答, 而取得比積極作答且選擇錯誤選項者分數還高 (因為若不答題不倒扣則全部未答題為 0 分, 但是積極作答者每題都答但是全部選擇錯誤, 將會拿負分).

- 在採用不答題與答錯選項者均倒扣分數, 且採"複選題部分給分", 應該是最公平的策略, 考試得分的排序將具有學習效度評量的參考價值.
.. @+node:amd_yen.20130321213622.1576: *5* @url adminer
http://www.adminer.org/

這是一個單一檔案的網際資料庫管理程式, 以 PHP 編寫, 適合用來管理遠端的 MySQL 資料庫, 也可以管理 SQLite 資料檔案.
.. @+node:amd_yen.20130409163608.1842: *4* SciTE 有關
SciTEGlobal.properties 檔案中

load.on.activate=1
save.on.deactivate=1

可以即時反應檔案變更.


若希望 SciTE 可以同時打開同一檔案, 則修改內建設定為:

check.if.already.open=0
.. @+node:amd_yen.20130409235757.1779: *4* deap 相關
.. @+node:amd_yen.20130409235757.1780: *5* @url deap 網站
https://code.google.com/p/deap/
.. @+node:amd_yen.20130409235757.1781: *5* @url deap document
http://deap.gel.ulaval.ca/doc/default/index.html
.. @+node:amd_yen.20130409235757.1782: *4* sympy 相關
.. @+node:amd_yen.20130409235757.1783: *5* @url sympy 網站
http://code.google.com/p/sympy/
.. @-all
.. @-leo
