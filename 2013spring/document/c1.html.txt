.. rst3: filename: document/c1.html

################################
程式語言(一)
################################

.. index:: 程式語言(一)

.. contents::
    :depth: 3

Trends
++++++

過去二十年, 教育模式在網路通訊科技的高度發展下, 雖然已經產生許多變化, 但是制式的大學授課仍以實體會面的傳統教學為主, 而以網路線上教學課程為輔.

2013 年秋季開始, 情況將會改觀, 來自美國喬治亞理工學院的電腦科學碩士學程, 將提供以網路線上教學為主的課程, 讓來自全球各地的大學畢業生, 可以繳交比實體會面課程更低的費用入學.

http://money.cnn.com/2013/05/01/pf/college/free-online-courses.moneymag/index.html

First professional Online Master of Science degree from the Gatech.

http://slashdot.org/submission/2662831/georgia-tech-to-offer-online-masters-degree-in-cs-for-under-7000-net

http://www.omscs.gatech.edu/faq/

#################################################

May 9, 2013, 7:33 p.m. ET

Sorry, College Grads, I Probably Won't Hire You

If you're at all interested in media, technology or related fields, please learn a little computer programming.

By KIRK MCDONALD

Dear college graduates:

The next month is going to be thrilling as you cross this major milestone in your education. Enjoy the pomp and circumstance, the congratulations, and the parties. But when it's all over and you're ready to go out into the world, you'd probably like to meet me, or others like me—I'm your next potential dream boss. I run a cool, rapidly growing company in the digital field, where the work is interesting and rewarding. But I've got to be honest about some unfortunate news: I'm probably not going to hire you.

This isn't because I don't have positions that need filling. On the contrary, I'm constantly searching for talented new employees, and if someone with the right skills walked into my office, he or she would likely leave it with a very compelling offer. The problem is that the right skills are very hard to find. And I'm sorry to say it, dear graduates, but you probably don't have them.

In part, it's not your fault. If you grew up and went to school in the United States, you were educated in a system that has eight times as many high-school football teams as high schools that teach advanced placement computer-science classes. Things are hardly better in the universities. According to one recent report, in the next decade American colleges will mint 40,000 graduates with a bachelor's degree in computer science, though the U.S. economy is slated to create 120,000 computing jobs that require such degrees. You don't have to be a math major to do the math: That's three times as many jobs as we have people qualified to fill them.

It's time to start addressing this crisis. States should provide additional resources to train and employ teachers of science, technology, engineering and math, as well as increase access to the latest hardware and software for elementary and high-school students. Companies—particularly those like mine that depend heavily on information technology—need to join the effort by sponsoring programs that help schools better train graduates to work in a demanding industry. But there's one more piece of the puzzle that's missing, and it's the one over which you have the most control: you.

I realize that you've a lot going on, and that the pressures of finding gainful employment are immense. But understand this, because your future might very well depend on it: If you want to survive in this economy, you'd be well-advised to learn how to speak computer code.

I don't mean that you need to become genius programmers, the kind who hack into NASA's computers for fun. Coding at such a level is a very particular and rare skill, one that most of us—myself included—don't possess, just as we don't possess the athletic ability to play for the New York Knicks.

What we nonexperts do possess is the ability to know enough about how these information systems work that we can be useful discussing them with others. Consider this example: Suppose you're sitting in a meeting with clients, and someone asks you how long a certain digital project is slated to take.

Unless you understand the fundamentals of what engineers and programmers do, unless you're familiar enough with the principles and machinations of coding to know how the back end of the business works, any answer you give is a guess and therefore probably wrong. Even if your dream job is in marketing or sales or another department seemingly unrelated to programming, I'm not going to hire you unless you can at least understand the basic way my company works. And I'm not alone.

If you want a job in media, technology or a related field, make learning basic computer language your goal this summer. There are plenty of services—some free and others affordable—that will set you on your way.

Teach yourself just enough of the grammar and the logic of computer languages to be able to see the big picture. Get acquainted with APIs. Dabble in a bit of Python. For most employers, that would be more than enough. Once you can claim familiarity with at least two programming languages, start sending out those resumes.

So congratulations again on your achievement—and good luck getting your real-world education.

Mr. McDonald is president of PubMatic, an ad tech company in Manhattan. Previously, he was president of digital for Time Inc.

http://developers.slashdot.org/story/13/04/09/2257223/electrical-engineer-unemployment-soars-software-developers-rate-drops-to-22

趨勢
++++++

程式其實無所不在

即便您對於電腦程式的學習實在提不起任何興趣, 請您耐著性子, 看完這裏的說明, 為何任何一個現代人多多少少都必須具備"程式"能力.

程式 - 並不一定意味著只有在電腦上執行的編碼, 程式其實就是依照特定格式與流程所進行的方式.

再看一遍, 依照特定格式與流程所進行的方式, 可以用來指一趟旅程, 從 A 點到 B 點選擇搭乘某一種交通工具, 然後在 B 點住上一晚, 接著再搭乘另外一種交通工具到達 C 點.

這樣的一趟旅行安排, 就是程式的一種, 只是這種流程的安排較為鬆散且自由, 從 A 點到 B 點可以選擇各種交通工具, 在 B 點的住宿或許也可以有許多選擇, 但是無論如何, 按照既定的行程與時間規劃, 來安排旅程, 就是一種程式.

將旅程的安排比喻為程式, 就是希望告訴未來的工程師, 針對特定格式流程的安排的需求, 其實無所不在, 不僅每一個人都有機會面對各種"程式"的安排, 而且善於規劃與安排這些特殊旅程內容者, 就比較不會錯過該搭的交通工具, 定錯原先要住宿的地點, 更不會讓原先充滿遊興的旅程, 被導遊給安排得面目全非.

任何人都無法脫離電腦所帶來的影響

接下來, 看看充斥在工程師週遭的工具 - 電腦, 這個不僅是現代人無法迴避的科學產物, 其實就連希望遺世獨立的"桃花源"人, 也一點都脫離不了關係.

主要的原因在於, 電腦科技的快速發展, 造就了數位化通信產業與交通業的高速發展, 沒有電腦, 其實人類根本無法大量設計製造並操作管理這些工具, 全球化四通八達的交通工具與無所不在的通訊電子裝置, 造成現今各國密集的人口移動與能源及物資的耗用, 無論是在地球的哪一個偏遠地區, 都將面臨全球暖化與天候急劇變化的影響.

任何行業都需要利用電腦與網路來增加工作效能

與電腦直接溝通的方式 - 就是寫電腦程式

C1 第一週
++++++++++++

程式語言課程學習目的在提供機械設計工程師一個直接運用電腦運算能力的管道, 由於機械設計工程領域牽涉許多與物理運作原理相關的技術, 無論是在初步產品設計概念的擬定或後續產品內容細部設計的分析, 都需要透過電腦程式來進行分析運算與資料管理, 雖然目前業界已經存在許多相關工具, 但是在特定情況下, 機械設計工程師仍然必須依照自己所擬定的分析流程來延伸既有軟體套件的功能, 或者打造完全客製化的軟體工具.

一般而言, 用來打造機械設計工程相關軟體套件所使用的程式語言, 分為編譯類的 C/C++、C#、Java與其他解譯式動態類的 PHP、Python、Javascript等.

編譯類:

- C 程式語言: 1960 年代末期, 為了打造 Unix 操作系統而發展出來取代組合語言的通用程序式程式語言, 具有高度硬體可移植性, 通過指標(pointer)可以操控低階記憶體並且產生容量小無需額外執行環境支援即可執行的程式語言, 至今 Linux 操作系統核心仍然採用 C 程式語言編寫.

- C++ 程式語言: 1970 年代末期, 在 C 的基礎上加上類別(class)作為開端的物件導向程式語言, 2011 年制定的程式語言標準特稱為 C++11.

- C# 程式語言: 由微軟(Microsoft)公司在 1990 年代末期, 為了與當時流行的 Java 程式語言抗衡所提出的"類似 C 的物件導向程式語言", 主要架構在 .NET 框架技術上.

- Java 程式語言: 由 Sun 公司(2009 年被 Oracle 以 74 億美元收購)在 1994 年所提出, 最早以智慧型網路家電領域為主物件導向且跨平台程式語言, 從簡化 C++ 並擴增網路應用出發, 經常與 C 並列為全球最多程式師使用的程式語言.

解譯類:

- PHP 程式語言: 創建於 1995 年, 從仿效 Perl 程式語言作為開端, 原來僅適用於網路程式開發, 目前許多網站系統 Wikipedia、Wordpress、Drupal、Facebook 都是以 PHP 為主體開發.

- Python 程式語言: 1980 年代末期出現的解譯式程式語言, 是一種適用於從概念到終端軟體套件打造的通用式語言(可以依照各階段的需求逐步演化套件中所使用的平台技術), 從以 C 建構的 CPython, 以 Java 建構的 Jython, 以 .NET 打造的 IronPython, 以及以 Python 打造的 PyPy 來看, Python 非常適合用來"接合"(joint)各種技術平台.

- Javascript 程式語言: 1995 年 Netscape 公司為了置入瀏覽器中所發明的解譯式程式語言, 2009 年 Node.js 將 Javascript 用於網際伺服器的後端開發後, 隨著 Html5 中各項多媒體標準的日趨完備, Javascript 所具備的網際環境前後端統一之開發優勢, 讓 Javascript 成為二十一世紀最有前景的程式語言之一, 廣見於各種消費者通信裝置的前後台技術中.

趨勢解讀:

- C/C++ 仍然主導各種操作系統的開發

- PHP 目前仍然是最流行的網際內容管理系統開發工具

- Python 仍然是各級工程師每日必備必用的原型打造工具

- Javascript 仍然會是全世界使用人口最多的瀏覽器程式語言

- Ruby 與 Node.js 已經逐步成為最具效率的網站開發工具

- Java(Oracle)、 C# (Microsoft)與 Object-C(Apple)在大公司的加持下, 仍然具有固定的佔有率, 不會升高但是也很難降低

- 其他程式語言, 當然未來提升佔有率(例如 Google 的 Go 與 Rebol, Lua 等)還是有機會, 可是人人無把握

直接執行程式
******************

Java 是一種需要編譯(Compile)的程式語言, 請直接在 Leo Editor 中選擇"第一週程式"下方的 @shadow c1/w1_1.java, 以滑鼠右鍵帶出"Edit c1/w1_1.java in SciTE.exe", 然後在 SciTE 程式編輯器中, 以滑鼠選擇 Tools->Compile, 等待程式編譯完成後, 再選擇 Tools->Go 執行程式, 然後依據程式指示完成執行動作.

問題:

. 何謂編譯?

. 何謂程式語言?

. 何謂 Leo Editor?

. 何謂執行程式?

. 何謂 Java 程式語言, 有何特點?

以下為 w1_1.java 程式碼:

.. literalinclude:: ../c1/w1_1.java
    :language: java
    :linenos:

Python 則是一種解譯式的程式語言, 程式在執行當下才即時自動進行編譯與執行, 因此就使用者操作的角度, 寫完 Python 程式後即可解譯(interpret)執行, 請直接在 Leo Editor 中選擇"第一週程式"下方的 @shadow c1/w1_server1.py, 以滑鼠右鍵帶出"Edit c1/w1_server1.py in SciTE.exe", 然後在 SciTE 程式編輯器中, 以滑鼠選擇 Tools->Go, 以便啟動伺服程式, 接著以相同流程執行 @shadow c1/w1_client1.py, 執行後 w1_client1.py 會連線到伺服程式, 然後由伺服器取得完成網路連線的字串.

問題:

. 何謂解譯?

. 何謂伺服程式?

. 何謂客戶端程式?

. 何謂 Python? Python 版次 2 與版次 3 的程式有何差別?

. 何謂字串?

. 何謂資料編碼?

. 何謂封包?

以下為 w1_server1.py 程式碼:

.. literalinclude:: ../c1/w1_server1.py
    :language: python
    :linenos:

以下則為 w1_client1.py 客戶端 Python 程式.

.. literalinclude:: ../c1/w1_client1.py
    :language: python
    :linenos:

隨身電子裝置與雲端超級電腦之間的合作:

w1_zmqcal1.py 負責送出運算要求, 而 w1_zmqcal2.py 則負責在雲端大型電腦中運行, 可以根據隨身電子裝置所送出的要求, 在雲端電腦中執行大規模資料搜尋與快速的運算, 之後再將結果送回行動裝置, 兩個程式的啟動先後次序並不會影響執行結果.

問題:

. iPhone 的 siri 服務是否採行類似的軟硬體架構配置?

. 類似的網路軟硬體運算服務可以套用到哪些其他的應用?

以下為 w1_zmqcal1.py 程式的原始碼, 代表的是在網路連結中負責送出運算要求的程式:

.. literalinclude:: ../c1/w1_zmqcal1.py
    :language: python
    :linenos:

以下為 w1_zmqcal2.py 程式原始碼, 代表負責執行運算端電腦所執行的程式:

.. literalinclude:: ../c1/w1_zmqcal2.py
    :language: python
    :linenos:

學習基本概念
******************

在"變是唯一的不變"環境下, 快學現賣逐漸成為主流

能配合不同需求進行生態演化(ecosystem evolution)的產品才有機會存活.

快學 - 各種學習速度要夠快, 不夠快就無法趕上國際社會向上提升的腳步

現賣 - 完成某一特定學習後就要馬上展現其價值, 學習運用某一技術的生命週期要短, 否則就無法在該項技術的生命週期過程中應用.

慢活 - 在快學現賣的過程中, 對於生活的要求必須要放慢腳步, 讓心靈得以脫離快速演化物質的摧殘, 役物且不役於物.

永續 - 在快學現賣的過程中, 並非只求短暫的成果, 而必須累積快速的價值來成就得以永續的生活標的, 這才是生態系統該有的表現.

程式語言是使用者與可程式化軟硬體系統溝通的媒介, 隨著全球化經濟的發展, 不同地理位置區域之間的互動與整合流程, 隨著網路與通信系統的發展而日益蓬勃, 當空間約束因全球即時訊息互動而加速各種事物的發展時間情況下, 各種產品生命週期變短, 讓可隨使用者需求而進行組合變化的產品逐漸成為主流.

新產品的要求 - 輕還要更輕、快還要更快、功能多還要更多、便宜還要更便宜(許多免費產品都仍乏人問津)、使用耐久還要不退流行.

將"可變化"置入產品的主要基因之中, 已經是不可或缺的元素, 因此透過程式讓可程式化的軟硬體充滿各種可能, 就成為工程師必要的專業技術與學養之一.

An ecosystem is a community of living organisms (plants, animals and microbes) in conjunction with the nonliving components of their environment (things like air, water and mineral soil), interacting as a system. These biotic and abiotic components are regarded as linked together through nutrient cycles and energy flows. As ecosystems are defined by the network of interactions among organisms, and between organisms and their environment, they can come in any size but usually encompass specific, limited spaces (although some scientists say that the entire planet is an ecosystem).

生態系統為一生物(植物、動物、微生物)與無生物環境元素(空氣、水、礦物、泥土)所組成的社群. 其間透過能量與養分進行連結互動. 生態系統也可以說成生物與環境所組成的有限空間內特定數量族群所組成的互動網路.

http://en.wikipedia.org/wiki/Ecosystem

Evolution is the change in the inherited characteristics of biological populations over successive generations. Evolutionary processes give rise to diversity at every level of biological organisation, including species, individual organisms and molecules such as DNA and proteins.

演化是生物族群歷經世代特徵繼承與轉變的過程. 演化過程成就了生物界各層級的多樣性, 其中包括品種、個體、DNS 與蛋白質分子.

http://en.wikipedia.org/wiki/Evolution

閱讀原文書
***************

許多創新科技的原始資料在第一時間都是以英文編寫, 假如希望能夠即時吸收這些知識, 就必須具備解讀英文資料的能力.

機械設計產品的開發無論是面對國際客戶或者是與國際的協同團隊進行合作, 都必須以英文作為溝通工具, 因此工程師必須具備一定的英文聽說讀寫能力.

圖書館每年都會採購各種專業領域的電子書與學術論文, 這些資料泰半都是以英文編寫, 為了有效運用這些資料, 大學生必須隨時利用時間增加自我的英文閱讀力.

閱讀原文書時, 不要將內容翻譯成中文, 而是要從整段文章內容去理解作者所要表達的意義, 因為英文翻譯遠比理解文義要難, 每讀完一段內容後, 要嘗試用自己的話重述段落重點.

閱讀原文書的技巧:
 
1. 利用瑣碎時間擴增自己的英文單字辨識能力
 
隨身攜帶一本容易攜帶的英文字典 (英漢或英英), 或者在手機中下載相關的英文字典或辭典, 或自行查閱單字解釋放在紙本小筆記本或手機中, 一有空閒時間就可記誦.
 
2. 確認英文字句中的單字意思後, 經由前後字句的結構, 學習推敲該段文句所要傳達的意思, 看完整段文字後, 思索其大要或以簡單英文或中文重述其大意.
 
3. 透過英文單字的字根與字源, 徹底了解某類單字群的同義與反義字, 以音節拆字進行記誦, 而非單獨以字母背誦單字或字句.
 
4. 使用 Google Translate, 同時透過字句朗讀, 學習各字句的語音轉折關係, 每一字句聽完後可自行錄製存在手機中, 有時間時可以多聽幾遍, 以提升英文聽力.
 
5. 觀看國外 Youtube 影片 (尤其是演講), 可同時開啟 CC (Closed Caption 或 subtitle, 即英文字幕), 第一次若無法了解各字句, 可透過字幕查詢字義後, 再關掉字幕, 嘗試辨識各字句的涵意, 多方練習, 即可提升英文聽力.

機械設計工程師如何學習程式?
****************************************

程式其實就是特定格式的程序, 而安排程序執行的目的通常希望能夠採最具效率的方式來完成某一項工作.

程式的英文為 program, 而 program 不一定指電腦程式, 進入大學求學也是接受特定的 program, 比如在機械設計系就接受未來成為機械設計工程師的訓練 program, 假如進入自動化工程系就是接受 automation engineer 的訓練 program.

不同 program 有不同的程序內容安排, 這些安排的內容其實只有兩種類別, 也就是屬性與方法, 比方說將學生排入機械設計工程系大一的甲班, 這個"大一"與"甲班"都是屬性, 而在大一下排入特定的課程, 這些課程也都有屬性, 也就是課程名稱, 課程上課時段, 上課地點, 由哪一位老師開課等.

至於大一甲班在上下學期所開的某一個課程, 由老師執行教學內容, 這個執行教學的內容就是方法, 因為方法的實踐在第一週安排執行特定的內容, 特定的講授, 特定的實習, 考試等等, 都是方法, 這些方法有些是沒有輸入與輸出, 只是單純執行, 有些則有輸入也有輸出.

上面所說的教學 program 其實與程式語言課程所教導的 computer program 很類似, 不同的 computer program 採用不同的 computer language, 可以在執行後達到某一特定目的.

學生在學校的某一系所修完課程之後, 進入職場, 大概無法僅憑藉所修過的課程內容來應付各種職場上問題, 因為特定職場上所使用的工具可能與學校所採用的工具不同, 學生所遭遇的許多難題可能在學校連想像都很困難(因為科技持續進展, 全球合作日益細化, 讓專業人士解決問題的時間將越來越短), 因此學生在學校絕對不能只學會某一課程的特定內容, 而必須藉由某一特定工具的教學或實習, 體會出未來的趨勢, 模擬未來可能會遭遇的情境, 並且積極做好心理準備, 否則一旦在毫無心理準備的情況下進入職場, 將會吃足苦頭.

好了, 假如各位能夠體會課程學習與 computer program 學習的類比, 應該就不難體會, 其實學習電腦程式語言必須養成好習慣, 才能夠達到日益精進的地步:

1. 目前個人電腦軟硬體大致分為微軟視窗 + Intel(AMD)based、蘋果 ios + intel based、泛 Linux + intel(AMD) based, 而所謂的泛 Linux 除了各種 Linux 分支外(較常見的有 Red Hat, Ubuntu, Fedora, Cent, Suse 等), 還包括大型的 Unix (IBM 的 AIX, HP 的 HP-UX 與 Oracle 的 Solaris).

也就是說各位未來在業界至少有機會看到除了 Windows 之外的 IOS, Red Hat, Ubuntu, Cent OS, Fedora, AIX, HP-UX 與 Solaris 等操作系統, 每一種 OS 的機器雖然類似但是內部架構與細部特性都有差異, 但是學校中通常只教導幾種系統的使用, 因此出社會後許多工程師就必須具備自我學習的能力, 在不同操作系統上執行任務.

2. 目前主流的電腦輔助機械設計套件包括 PTC 的 Creo, Siemens 的 NX 與 Solid Edge, Dassault 的 Catia 與 Solidworks, AutoDesk 的 Inventor 等, 除了 MCAD 外, 還有許許多多 CAE/CAM 或其他相關的各種特殊套件與模組, 學校根本無法全部採用, 只能透過代表性的一兩套來進行教學, 因此在學習過程中就必須深刻體會各種套件的大架構與未來發展趨勢, 以便在未來碰到時, 能在最短時間內上手執行工作.

3. 目前與機械設計較有關係的主流的電腦程式語言有 C/C++, Java, Python, Javascript, Ruby, Lua, PHP, C#, Basic, Fortran, 等, 其他還有數學套件: Matlab, Maple, R, Mathematica, MathCAD, Scilab等, 每一種套件或語言都各有特色, 工程師必須學會在不同場合與時機進行套用.

假如真要從中篩選出幾種程式語言, 則個人看法為:

1. 先學 Python, 再學 C, 之後配合內容管理系統過程納入 PHP, 之後若需要執行控制系統則導入初步的 C++ 或利用 Java 建構較大型的程式.

2. 目前在網際協同的階段避免不了學習 Javascript, html, css 等基本架構.

3. 至於 Matlab 與 Mathematica 通常對於研究所以上課程的應用較多, 需要時再學習.

4. 因為 Python 與 PHP 都是解譯式程式語言, 非常適合進行機械設計流程的配置使用, 若在過程中需要執行速度, 則可以將部分運算流程改由 C/C++ 編寫, 然後再由 Python 呼叫執行, 而 PHP 則是目前在主流資料庫系統連結最簡易且完整的方案(可以從國際大型 Wki, 網誌, 內容管理開發採用中得到印證).

5. 至於 Java 則是目前用來開發大型 MCAD, CAE 與 CAM 的首選, 假如未來希望朝向跨平台軟體系統開發的路走, 則必須要精通 Java 與 C++, 假如希望充分發揮 Windows 的功能與特性, 則還必須擅長 C#.

總結

1. 教學流程、學習流程與電腦程式其實都是特定格式的程序安排, 學習上可以互相呼應.

2. 電腦程式軟硬體環境包羅萬象, 不能滿足於單一工具的學習, 而必須設法在學習過程中, 體會各工具的特性與差異, 達到面對新工具也能快速上手的心理準備與學習能力.

3. 機械設計工程師的電腦程式語言學習順序應該是: Python, C, PHP, Javascript, C++, Java, 至於數學套件則為: Matlab, Mathematica, Scilab 等.

4. 每一個人的一生也是在執行程式, 必須彈性地配合需求不斷進行自我能力提升, 才能有機會得到高品質的生活經驗與結果.

Raspberry Pi
************

在台灣購買

http://www.raspberrypi.com.tw/purchase/

Learn Raspberry Pi with Linux (2013)

http://rd.springer.com/book/10.1007/978-1-4302-4822-4/page/1

Practical Raspberry Pi (2013)

http://rd.springer.com/book/10.1007/978-1-4302-4972-6/page/1

Arduino
^^^^^^^

Beginning Arduino Programming (2011)

http://rd.springer.com/book/10.1007/978-1-4302-3778-5/page/1

Learn Electronics with Arduino (2012)

http://rd.springer.com/book/10.1007/978-1-4302-4267-3/page/1

Practical Arduino Engineering (2011)

http://rd.springer.com/book/10.1007/978-1-4302-3886-7/page/1

Arduino Robotics (2011)

http://rd.springer.com/book/10.1007/978-1-4302-3184-4/page/1

Practical AVR Microcontrollers (2012)

http://rd.springer.com/book/10.1007/978-1-4302-4447-9/page/1

C1 第二週
++++++++++++

http://docs.python-guide.org/en/latest/

Python 程式環境
*******************

這裡所介紹的 Python 為 Python 3, 也就是最新的 Python 程式語法, 與 Python 2 有些差異, 以下為網路上有關 Python 3 的教材:

http://www.python-course.eu/python3_course.php

機械設計工程師可將Python 當作免費的 Matlab 或 Mathematica 套件陽春版.

Python 可以作為機械設計過程中需要運算的計算機, 可以寫簡單的單機套件, 無論是 2D/3D 模擬套件, 檔案格式轉換, 簡單的網際程式, 與 C 程式庫結合控制數位硬體, 都很適合利用 Python 進行程式開發, Google 的許多網際應用大量採用 Python, Google 也採用 Java 與 C++. (Python 發明人目前任職於 Dropbox)

Python 電子書: 

Introduction to Programming Concepts with Case Studies in Python (2012)

http://link.springer.com/book/10.1007/978-3-7091-1343-1/page/1

C 對於機械設計工程師的重要性則在於建立未來需要學習 Matlab, C++, Java, C# 等程式語言時, 可以有一個基礎, C 程式在跨電腦硬體的相容度非常好, 假如以後希望朝自動控制, 尤其是電腦整合設計製造的大型或小型 (嵌入式) 硬體開發的機械工程師, 都必須精通 C 程式, 

PHP 則是用來編寫網際程式最簡單的選擇, 目前全球有超過 70% 的網站是採用 PHP 建構, 許多網際內容管理系統都是採用 PHP 建構, PHP 結合 JavaScript 幾乎可以解決多數網際相關的程式應用, Facebook 的主要架構就是採用 PHP 建構, 後端則使用 Python, Java 與 C++, Wikipedia 也是採用 PHP 建構.

JavaScript 則使用在所有的網際應用上, 幾乎是全世界用戶最多的程式語言.

Python 2 轉為 Python 3 程式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



C 程式環境
**************

這裡所介紹的 C 主要在探討較為常用的 C 程式語法及架構, 並且著重在 C 指標的應用, 目的在爾後的硬體控制.

C Tutorial

http://einstein.drexel.edu/courses/Comp_Phys/General/C_basics/

Guide to C programming

http://beej.us/guide/bgc/output/html/singlepage/bgc.html

Beginning C for Arduino (2012)

http://rd.springer.com/book/10.1007/978-1-4302-4777-7/page/1

Java 程式環境
*****************

Java 程式語言是一種簡化的網路時代 C++ 程式語言, 具有高度的可攜性與平台移植性.

這裡教導 Java 主要目的在於希望能用於電腦輔助設計實習課程, 利用 Java 程式來編寫 J-Link 程式, 以便與 PTC Creo 的零組件進行互動.

Java 7 for Absolute Beginners (2011)

http://rd.springer.com/book/10.1007/978-1-4302-3687-0/page/1

Beginning Java 7 (2011)

http://rd.springer.com/book/10.1007/978-1-4302-3910-9/page/1

SciTE 編譯 Java 設定
^^^^^^^^^^^^^^^^^^^^^^^^

SciTE 系統中的 cpp.properties 檔案中負責處理 .c .cpp 與 .java 程式的編譯與執行設定.

以 SciTE 透過 Options->Open cpp.properties 開啟 cpp.properties 檔案, 將原先對於 .java 程式編譯與執行的設定, 修改為可攜系統的對應設定.

.. code-block:: none

    # 這是原先的設定
    #command.compile.*.java=javac $(FileNameExt)
    #command.build.*.java=javac *.java
    #command.go.*.java=java -cp . $(FileName)
    
    # 配合可攜系統的 jdk 版次進行設定, 並且指令採用 utf-8 的程式編碼
    Java_Home=V:\IDE\Java\jdk1.7.0_21
    Java_Bin=$(Java_Home)\bin
    
    command.compile.*.java=$(Java_Bin)\javac.exe  -encoding utf-8 $(FileNameExt)
    command.build.*.java=$(Java_Bin)\javac.exe  -encoding utf-8 *.java
    command.go.*.java=$(Java_Bin)\java.exe $(FileName)
    
    command.compile.*.fx=javafxc -d bin $(FileNameExt)
    command.build.*.fx=javafxc -d bin *.fx
    command.go.*.fx=javafx -cp bin $(FileName)

SciTE 環境下編譯執行 Java
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

參考資料: http://openhome.cc/Gossip/JavaGossip-V1/FirstJava.htm

PHP 程式環境
****************

PHP 是一種為網路應用而生的程式語言, 雖然 PHP 也可以用來開發單機視窗程式, 但是大多數的 PHP 應用幾乎都集中在網際環境, 尤其與 MySQL 搭配下, 成就了 Wikipedia, Facebook, phpbb, Wordpress, Drupal 等著名的網際應用.

協同產品設計實習所使用的群組軟體 Simple Groupware, 就是採用 PHP + MySQL 或 SQLite 建構的網際套件.

Guide to HTML, JavaScript and PHP (2011)

http://rd.springer.com/book/10.1007/978-0-85729-449-4/page/1

Javascript 程式環境
***********************

Javascript 是全世界應用最廣的程式語言, 主要原因是幾乎每一套瀏覽器都內建 Javascript 解譯器, 並且幾乎所有的網路應用都離不開 Javascript 程式的執行, 最早 Javascript 只用於瀏覽器客戶端程式的執行, 自 2009 年以後, node.js 的出現, 將 Javascript 也用於 server 端的程式開發, 因此目前 node.js 挾著客戶端與伺服器端的整合, 以及 websocket、ajax 技術、html5 等技術的結合, 使得 Javascript 成為網際多媒體應用流程中最為重要的程式語言.

Learn HTML5 and JavaScript for Android (2012)

http://rd.springer.com/book/10.1007/978-1-4302-4348-9/page/1

Beginning WebGL for HTML5 (2012)

http://rd.springer.com/book/10.1007/978-1-4302-3997-0/page/1

Lua 程式環境
****************

Lua 是目前唯一在南半球(巴西)所打造的主流程式語言, 最初的應用是在工程機器硬體系統中負責進行資料轉換, 由於其輕薄短小, 非常適合嵌入各種軟硬體套件中, 來進行程式運作邏輯使用, 因此廣見於各種網路遊戲程式套件中, Lua 目前是 V-REP 模擬套件中制式的元件控制語言, 將會在電腦輔助設計實習課程中使用.

Beginning Lua with World of Warcraft Add-ons (2009)

http://rd.springer.com/book/10.1007/978-1-4302-2372-6/page/1

Forth 程式環境
******************

除了主流程式語言外, Forth 程式語言有其特點, 許多著名的軟體套件也都使用 Forth, 其中包括 AutoDesk 與 Java.

AutoDesk 部分程式碼使用 Forth: http://www.fourmilab.ch/atlast/

Java 的虛擬機器設計也採用類似 Forth 的概念: http://www.cpushack.com/CPU/cpuAppendB.html

以下為參考資料:

http://www.mpeforth.com/arena/ProgramForth.pdf

http://www.forth.com/starting-forth/

C1 第五週
++++++++++++

程式流程圖

http://vpython.erikthompson.com/

串列資料格式應用

以下兩支程式:

.. code-block:: python

    #coding: utf8
    # 使用者將不同時段的課程以(列, 行, 課程名稱) 輸入串列資料中
    # 若課程資料需要排序, 則利用 sorted() 或 itemgetter() 處理
    # 若需要配合雙 for 迴圈將混亂排序之課程資料納入表單中, 則設法在串列中依序搜尋出與列行對應的課程, 即可順利列出課表
    from operator import itemgetter
    
    # 課程資料為串列資料, 其元件則為元組資料, 串列可排序, 元組則次序固定
    課程資料 =[(2,2,"1,2 課程"),(1,1,"1,1 課程"),(1,3,"1,3 課程")]
    
    print(sorted(課程資料, key=lambda 課程: 課程[0], reverse=True))   # 以列反向排序
    # 假如要在兩個資料元素接續排序, 則需要 operator 中的 itemgetter()
    print(sorted(課程資料, key=itemgetter(0,1)))   # 以列排序, 再以行排序
    print(sorted(課程資料, key=lambda 課程: 課程[1]))   # 以行排序
    print(sorted(課程資料, key=lambda 課程: 課程[2]))   # 以課程名稱排序
    
    for 課程子內容 in 課程資料:
        if 課程子內容[0] == 1 and 課程子內容[1] == 1:
            print(課程子內容)
    
    有資料 = False
    print("<table border=1>")
    for 列 in range(1,2):
        print("<tr>")
        for 行 in range(1,4):
            print("<td>")
            for 課程子內容 in 課程資料:
                if 課程子內容[0] == 列 and 課程子內容[1] == 行:
                    有資料 = True
                    print(課程子內容)
            if (有資料 == False):
                print("&nbsp;")
            print("</td>")
            有資料 = False
        print("</tr>")
    print("</table>")

取課程資料的程式:

.. code-block:: python

    #coding: utf8
    
    # 如何建立課程名稱與時段串列資料的輸入取值
    課程資料=[]
    列 = 99
    # 若列輸入為 0 則退出 while 迴圈
    while (int(列) != 0):
        '''
        列 = input("請輸入列:")
        print("列為......:",列)
        if (int(列) == 0):
            break
        行 = input("請輸入行:")
        print("行為......:",行)
        '''
        # 利用 split() 一次取列數與行數
        列, 行 = input("請輸入列數與行數, 空白隔開: ").split()
        print("列,　行為......:",列,行)
        if (int(列) == 0):
            break
        課程名稱 = input("請輸入課程名稱:")
        print("課程名稱為......:",課程名稱)
        課程資料.append((int(列), int(行), 課程名稱))
    print(課程資料)

C1 第六週
++++++++++++

http://www.codecademy.com/zh/#!/exercises/0

http://code.google.com/p/hashao/wiki/ChinesePythonTutor

C1 第七週
++++++++++++

視窗螢幕局部放大軟體: Virtual Magnifying Glass

Python 程式的編寫規範: http://www.python.org/dev/peps/pep-0008/

.. code-block:: python

    #coding: utf-8
    # HTML.py tutorial - P. Lagadec
     
    # see also http://www.decalage.info/en/python/html for more details and
    # updates.
    '''
    表格資料 = []
    列資料 = []
    for 變數 in range(1,10):
        列資料.append(變數)
    for 變數 in range(10):
        表格資料.append(列資料)
    print(列資料)
    print(表格資料)
    '''
     
    import HTML
     
    # open an HTML file to show output in a browser
    HTMLFILE = 'HTML_tutorial_output.html'
    f = open(HTMLFILE, 'w',encoding="utf-8")
     
    #範例一
     
    '''table_data = [
    ['Last name',   'First name',   '年紀'],
    #[HTML.TableCell('測試 colspan=2 使用', #attribs={'colspan':3})],
            ['Last name',   'First name',   '年紀'],
            ['Smith',       'John',         30],
            ['Carpenter',   'Jack',         47],
            ['第一格','第二格',HTML.TableCell('測試 rowspan=2 使用', attribs={'rowspan':2})],
            ['第三格','第四格'],
         ]
    '''
    table_data = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]
     
    htmlcode = HTML.table(table_data)
    print (htmlcode)
    f.write(htmlcode)
    f.write('<p>')
    print ('-'*79)
     
    # 最後檔案 handle 關閉
    f.close()
    print ('\nOpen the file %s in a browser to see the result.' % HTMLFILE)

C1 第八週
++++++++++++



Python 的 data model
*********************

property function

.. code-block:: none

    property(fget=None, fset=None, fdel=None, doc=None)
    
    Return a property attribute.
    
    fget is a function for getting an attribute value, likewise fset is a function for setting, and fdel a function for del’ing, an attribute. Typical use is to define a managed attribute x:

About __slots__

.. code-block:: none

    By default, instances of classes have a dictionary for attribute storage. This wastes space for objects having very few instance variables. The space consumption can become acute when creating large numbers of instances.
    
    The default can be overridden by defining __slots__ in a class definition. The __slots__ declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because __dict__ is not created for each instance.
    
    object.__slots__
    
    This class variable can be assigned a string, iterable, or sequence of strings with variable names used by instances. If defined in a class, __slots__ reserves space for the declared variables and prevents the automatic creation of __dict__ and __weakref__ for each instance.

About __len__

.. code-block:: none

    object.__len__(self)
    
    Called to implement the built-in function len(). Should return the length of the object, an integer >= 0. Also, an object that doesn’t define a __bool__() method and whose __len__() method returns zero is considered to be false in a Boolean context.

About __getitem__

.. code-block:: none

    object.__getitem__(self, key)
    
    Called to implement evaluation of self[key]. For sequence types, the accepted keys should be integers and slice objects. Note that the special interpretation of negative indexes (if the class wishes to emulate a sequence type) is up to the __getitem__() method. If key is of an inappropriate type, TypeError may be raised; if of a value outside the set of indexes for the sequence (after any special interpretation of negative values), IndexError should be raised. For mapping types, if key is missing (not in the container), KeyError should be raised.

C1 第十週
++++++++++++

結合 List, Tuple, HTML class, def, CherryPy 建立網際資料處理程式:

程式說明:

1. 利用 CherryPy 框架建立網際程式

2. 在不使用資料庫系統情況下, 透過 List, Tuple 的資料結構特性, 可以排序, 特定內容替換與重組, 模擬資料庫列表功能.

3. 引用 HTML 模組程式, 可以將 List 資料專為網際表格.

.. code-block:: python

    #coding: utf8
    import random
    幾位學生 = 4
    最後學號 = 56
    學號 = []
    for 索引 in range(幾位學生):
        學號.append(random.randrange(1, 最後學號+1))
    print (學號)

C1 第十二週
+++++++++++++++

Python 3D 繪圖

.. literalinclude:: ../c1/w12_3dplot1.py
    :language: python
    :linenos:
    
.. literalinclude:: ../c1/w12_3dplot2.py
    :language: python
    :linenos:
    
.. literalinclude:: ../c1/w12_3dplot3.py
    :language: python
    :linenos:
    
.. literalinclude:: ../c1/w12_3dplot4.py
    :language: python
    :linenos:
    
.. literalinclude:: ../c1/w12_3dplot5.py
    :language: python
    :linenos:

