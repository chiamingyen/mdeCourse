.. @+leo-ver=5-thin
.. @+node:amd_yen.20130308210411.2387: * @file c2.txt
.. @@language rest
.. @@tabwidth -4

.. @+at @rst-options
..  call_docutils=False
..  code_mode=False
..  generate_rst=True
..  http_server_support = False
..  show_organizer_nodes=True
..  show_headlines=True
..  show_leo_directives=True
..  stylesheet_path=..\doc
..  write_intermediate_file = True
..  verbose=True
.. @@c

.. @+all
.. @+node:amd_yen.20130308210411.2388: ** @rst document\c2.html
########################
程式語言(二)
########################

.. index:: 程式語言(二)

.. contents::
    :depth: 3
.. @+node:amd_yen.20130308210411.2390: *3* C2 第一週
讓學員自行建構可攜 portableKMOL 的目的在練習網際程式框架的基本組成 (程式開發環境、內容管理系統、全球資訊網伺服器、以及各類相關工具), 學員熟悉此流程後, 可以自行修改框架並且配合需要進行各模組的改版.

.. Note:: 這裡的程式化文書處理內容是第一次放入 C2 的課程內容中, 主要的著眼點在於利用程式方法進行協同文書處理.

1. 利用程式進行文書處理

    需要安裝 docutils 模組

    也可以利用 Sphinx 模組將 rst 檔案轉為 html 與 tex, 然後再以 MikeTeX 將 tex 轉為 pdf 檔案

2. 利用程式進行分析運算與設計檔案轉換

以安裝 Python33 所使用的各模組, 各舉出應用範例, 並以機械設計相關應用為考量

.. 為何選擇 Python:: http://www.stat.washington.edu/~hoytak/blog/whypython.html

    Python 3.3 版與相關模組安裝:
    
    Python 3.3 本體
    
    http://www.python.org/download/
    
    安裝後 C:\Python33 約佔 33 MB
    
    distribute (Python 的 module  installer, 可利用 easy_install 安裝所需模組)
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#distribute
    
    安裝後 C:\Python33 約佔 37 MB
    
    pip (Python 的 module installer, 安裝後可利用 "pip install 模組名稱" 完成模組安裝
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip
    
    安裝後 C:\Python33 約佔 38 MB
    
    win32com (Python 與 Windows COM 物件的連結模組, 可以利用 win32com 來連結 SolidWorks, Inventor, Word, Excel 等 Windows 應用程式物件)
    
    http://sourceforge.net/projects/pywin32/files/pywin32/Build%20218/
    
    安裝後 C:\Python33 約佔 64 MB
    
    PIL (Python 的 Image library, 可以處理 2D 影像檔案)
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#pil
    
    安裝後 C:\Python33 約佔 67 MB
    
    matplotlib (Python 類似 matlab 的 plot library)
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib
    
    安裝後 C:\Python33 約佔 91 MB
    
    numpy (Python 的 numerical library, 用於數值分析運算)
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy
    
    安裝後 C:\Python33 約佔 138 MB
    
    sympy (Python 的 Symbolic manipulation 模組, 用於符號式運算 (相對於數值分析))
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#sympy
    
    安裝後 C:\Python33 約佔 175 MB
    
    scipy (Python 的 Scientific library)
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy
    
    安裝後 C:\Python33 約佔 292 MB
    
    PyQt (Python 連結 Qt (nokia 的開源 GUI 程式庫, 更自由的對應類似版本為 Pyside) 的程式庫, 可用來開發圖形介面單機程式, 例如: Leo editor 就是採用 PyQt 開發)
    
    http://www.riverbankcomputing.com/software/pyqt/download
    
    安裝後 C:\Python33 約佔 374 MB
    
    docutils (Python 的 document utility, 可將 rst 格式檔案轉為 html)
    
    http://www.lfd.uci.edu/~gohlke/pythonlibs/#docutils
    
    安裝後 C:\Python33 約佔 383 MB
    
    Leo editor (以 Python 編寫的 outliner 與 IDE)
    
    http://www.greygreen.org/leo/
    
    安裝後 C:\Python33 約佔 401 MB
    
    以C:\Python33\Scripts\pip install sphinx
    
    安裝後 C:\Python33 約佔 413 MB

單機模式

網際模式

結合 IPython 與 Leo Editor 的基本用法:

http://webpages.charter.net/edreamleo/IPythonBridge.html

3. 利用程式進行協同設計

網際機械設計流程 - 以 Pyforum + brython 為範例, 可以開發 html5 網際程式

網際內容管理 - django based CMS

網際專案管理 - OpenPLM - http://wiki.openplm.org/trac/wiki/Credits

OpenERP/PLM - http://www.openerpplm.eu/

利用程式進行資料處理範例:

產生虛擬學員名單程式:

.. literalinclude:: ../c2/generate_stud.py
   :language: python
   
上課學員分組程式:

.. literalinclude:: ../c2/grouping.py
   :language: python



.. @+node:amd_yen.20130310161901.1488: *4* Leo editor 與外部檔案
External files: Any outline node (and its descendants) can be "connected" to any file on your file system. Several kinds of connections exist. The three most common kinds are:

1. @edit: Leo reads the entire external file into the @edit node's body text.

採用 @edit 指令, Leo 會將外部檔案的內容讀進該節點的內文區.

2. @auto: Leo parses the external file and creates an outline that shows the structure of the external file, just as in typical class browsers.

採用 @auto 則會解讀外部檔案, 並且根據該檔案的架構組成大綱模式.

3. @file: Leo makes a two way connection between the @file node (and its descendants) and the external file. You can update the external file by writing the Leo outline connected to it, or you can update the outline by changing the external file. Moreover, you can easily control how Leo writes nodes to the file: you can rearrange how Leo writes nodes. To do all this Leo uses comments in the external file called sentinels that represent the outline structure in the external file itself.

假如採用 @file, 則使用者可以直接在節點的內文區編輯內容, 或直接編輯外部檔案, Leo 會以雙向的方式處理檔案的內容變更.

All of these connections allow you to share external files with others in a collaborative environment. With @file, you can also share outline structure with others. Thus, a single Leo outline can contain an entire project with dozens or even hundreds of external files. Using Leo, you never have to open these files by hand, Leo does so automatically when it opens the Leo outline. Leo is a unique new kind of IDE.

而這個模式可以再與網際的上傳檔案結合, 假設對應到某一節點的 @file 檔案, 使用者可以由瀏覽器上傳檔案, 一旦開啟 Leo, 所有檔案內容就會整合進 Leo 的編輯區.
.. @+node:amd_yen.20130308210411.2391: *3* C2 第二週
使用 docutils 模組:

docutils 範例1

下列範例利用網路上的一份 rst 格式檔案, 利用 Python 的 urllib.request 模組開啟檔案後, 將原本為數位格式的資料編碼為文字格式資料後, 再利用 docutils.core 函式庫中的 publish_string 函式, 將 rst 檔案轉為 html 格式, 最後再利用可攜的 Chrome 開啟此一 html 檔案.

.. literalinclude:: ../c2/docutils_ex1.py
    :language: python
    :linenos:

.. Note:: 請注意, 上面程式碼採用 literalinclude, 但是卻無法讓 linenos 顯示行號的屬性運作, 結果不僅沒有 python 程式 highlight, 內容雙跳行, 而且沒有行號.

docutils 範例2

下列範例與範例 1 類似, 唯一的差別為文件中需要一個 image.png 圖檔, 利用 urllib.request.urlopen(影像檔案url ).read() 讀取影像網址中的數位檔案後, 直接存檔. 隨後再利用 docutils.core 函式庫中的 publish_string 函式, 將 rst 檔案轉為 html 格式的同時, 導入 image.png 檔案.

.. literalinclude:: ../c2/docutils_ex2.py
    :language: python
    :linenos:

.. Note:: 請注意, 上面程式碼採用 literalinclude, 但是卻無法讓 linenos 顯示行號的屬性運作, 結果不僅沒有 python 程式 highlight, 內容雙跳行, 而且沒有行號.

練習:

1. 請各組員分別在各自的 www 主機中建立 rst 檔案與影像檔, 再由其他組員以 urllib.request_ 與 publish_string_ 等函式功能, 將其他組員的 rst 檔案合併, 並轉換為 html 檔案格式.

.. _urllib.request: http://docs.python.org/3.0/library/urllib.request.html

.. _publish_string: http://docutils.sourceforge.net/docs/api/publisher.html
.. @+node:amd_yen.20130308214521.2437: *3* C2 第三週
Sphinx 相關


.. @+node:amd_yen.20130308214521.2438: *4* Sphinx 教學
利用 Leo Editor 與 Sphinx 開發手冊的範例:

1. 與 nginx 有關的線上參考書

    http://tengine.taobao.org/book/

    參考書原始碼: http://code.taobao.org/p/nginx_book/src/trunk/

2. 用 Sphinx 寫書

    http://hyry.dip.jp/tech/book/page/sphinx
    
    編輯環境下載: http://hyry.dip.jp/files/books.zip
    
    寫書工具介紹: http://hyry.dip.jp:8000/files/scipybook-tools.pdf
    
其他利用 Sphinx 進行電子書開發的範例:

http://itindex.net/detail/13288-restructuredtext-sphinx

Sphinx 簡介

source directory

conf.py

sphinx-quickstart script to setup the initial source directory and create default conf.py

sphinx-build
.. @+node:amd_yen.20130313165007.1509: *5* nginx 手冊實作
必備工具:

    portableKMOL 可攜套件 (Sphinx 與 portableLatex)
    http://code.taobao.org/p/nginx_book/src/trunk/ 中的 rst 檔案
    
實作目的:

    讓學員了解如何以程式方法產生 html 與 pdf 格式的電子手冊
    
專案檔案:

    https://github.com/chiamingyen/nginxProject
    
執行步驟:

    1. 啟動 portableKMOL 後, 在"命令提示字元區", 以 V:\mkdir nginx_project 建立電子手冊專用目錄.
    
    2. 下載 `portable subversion client_`, 利用 Repository->Checkout, 簽出 `nginx book_` 的資料.
    
    3. 在命令列中 cd nginx_project 目錄, 並且參考 `First step with sphinx_` 中的說明, 執行 
    
.. code-block:: none

   sphinx-quickstart
   
並且依序回答相關提問.
    
    4. 以 SciTE 編輯 index.rst, 導入下載自  `nginx book_` 資料中的 .rst 檔案:
    
.. code-block:: none

    .. cmsimple documentation master file, created by
       sphinx-quickstart on Wed Mar 13 19:31:14 2013.
       You can adapt this file completely to your liking, but it should at least
       contain the root `toctree` directive.
    
    Welcome to cmsimple's documentation!
    ====================================
    
    Contents:
    
    .. toctree::
       :maxdepth: 2
    
       chapter_2
       chapter_3
       chapter_4
       chapter_5
       chapter_6
       chapter_7
       chapter_11
       chapter_12
       example_1
    
    Indices and tables
    ==================
    
    * :ref:`genindex`
    * :ref:`modindex`
    * :ref:`search`

將上列 chapter_2.rst ~ example_1.rst 等檔案放入 index.rst 所屬目錄中.

    5. 編輯 conf.py:
    
.. code-block:: python
    :linenos:
    
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    #
    # cmsimple documentation build configuration file, created by
    # sphinx-quickstart on Wed Mar 13 19:31:14 2013.
    #
    # This file is execfile()d with the current directory set to its containing dir.
    #
    # Note that not all possible configuration values are present in this
    # autogenerated file.
    #
    # All configuration values have a default; values that are commented out
    # serve to show the default.
    
    import sys, os
    
    # If extensions (or modules to document with autodoc) are in another directory,
    # add these directories to sys.path here. If the directory is relative to the
    # documentation root, use os.path.abspath to make it absolute, like shown here.
    #sys.path.insert(0, os.path.abspath('.'))
    
    # -- General configuration -----------------------------------------------------
    
    # If your documentation needs a minimal Sphinx version, state it here.
    #needs_sphinx = '1.0'
    
    # Add any Sphinx extension module names here, as strings. They can be extensions
    # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
    extensions = ['sphinx.ext.pngmath', 'sphinx.ext.mathjax']
    
    # Add any paths that contain templates here, relative to this directory.
    templates_path = ['_templates']
    
    # The suffix of source filenames.
    source_suffix = '.rst'
    
    # The encoding of source files.
    #source_encoding = 'utf-8-sig'
    
    # The master toctree document.
    master_doc = 'index'
    
    # General information about the project.
    project = 'cmsimple'
    copyright = '2013, the author'
    
    # The version info for the project you're documenting, acts as replacement for
    # |version| and |release|, also used in various other places throughout the
    # built documents.
    #
    # The short X.Y version.
    version = '1.0'
    # The full version, including alpha/beta/rc tags.
    release = '1.0'
    
    # The language for content autogenerated by Sphinx. Refer to documentation
    # for a list of supported languages.
    language = 'zh_TW'
    
    # There are two options for replacing |today|: either, you set today to some
    # non-false value, then it is used:
    #today = ''
    # Else, today_fmt is used as the format for a strftime call.
    #today_fmt = '%B %d, %Y'
    
    # List of patterns, relative to source directory, that match files and
    # directories to ignore when looking for source files.
    exclude_patterns = []
    
    # The reST default role (used for this markup: `text`) to use for all documents.
    #default_role = None
    
    # If true, '()' will be appended to :func: etc. cross-reference text.
    #add_function_parentheses = True
    
    # If true, the current module name will be prepended to all description
    # unit titles (such as .. function::).
    #add_module_names = True
    
    # If true, sectionauthor and moduleauthor directives will be shown in the
    # output. They are ignored by default.
    #show_authors = False
    
    # The name of the Pygments (syntax highlighting) style to use.
    pygments_style = 'sphinx'
    
    # A list of ignored prefixes for module index sorting.
    #modindex_common_prefix = []
    
    
    # -- Options for HTML output ---------------------------------------------------
    
    # The theme to use for HTML and HTML Help pages.  See the documentation for
    # a list of builtin themes.
    html_theme = 'default'
    
    # Theme options are theme-specific and customize the look and feel of a theme
    # further.  For a list of options available for each theme, see the
    # documentation.
    #html_theme_options = {}
    
    # Add any paths that contain custom themes here, relative to this directory.
    #html_theme_path = []
    
    # The name for this set of Sphinx documents.  If None, it defaults to
    # "<project> v<release> documentation".
    #html_title = None
    
    # A shorter title for the navigation bar.  Default is the same as html_title.
    #html_short_title = None
    
    # The name of an image file (relative to this directory) to place at the top
    # of the sidebar.
    #html_logo = None
    
    # The name of an image file (within the static path) to use as favicon of the
    # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
    # pixels large.
    #html_favicon = None
    
    # Add any paths that contain custom static files (such as style sheets) here,
    # relative to this directory. They are copied after the builtin static files,
    # so a file named "default.css" will overwrite the builtin "default.css".
    html_static_path = ['_static']
    
    # If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
    # using the given strftime format.
    #html_last_updated_fmt = '%b %d, %Y'
    
    # If true, SmartyPants will be used to convert quotes and dashes to
    # typographically correct entities.
    #html_use_smartypants = True
    
    # Custom sidebar templates, maps document names to template names.
    #html_sidebars = {}
    
    # Additional templates that should be rendered to pages, maps page names to
    # template names.
    #html_additional_pages = {}
    
    # If false, no module index is generated.
    #html_domain_indices = True
    
    # If false, no index is generated.
    #html_use_index = True
    
    # If true, the index is split into individual pages for each letter.
    #html_split_index = False
    
    # If true, links to the reST sources are added to the pages.
    #html_show_sourcelink = True
    
    # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
    #html_show_sphinx = True
    
    # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
    #html_show_copyright = True
    
    # If true, an OpenSearch description file will be output, and all pages will
    # contain a <link> tag referring to it.  The value of this option must be the
    # base URL from which the finished HTML is served.
    #html_use_opensearch = ''
    
    # This is the file name suffix for HTML files (e.g. ".xhtml").
    #html_file_suffix = None
    
    # Output file base name for HTML help builder.
    htmlhelp_basename = 'cmsimpledoc'
    
    
    # -- Options for LaTeX output --------------------------------------------------
    TITLE = "nginx 電子書"
    
    latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #'papersize': 'letterpaper',
    
    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',
    "maketitle": r"""
    \maketitle
    \renewcommand\contentsname{目 錄}
    \renewcommand\partname{部分} 
    \renewcommand{\chaptermark}[1]{\markboth{\textnormal{第 \thechapter\ 章 \hspace{4mm} #1}}{}}
    \renewcommand{\sectionmark}[1]{\markright{\textnormal{\thesection \hspace{2mm} #1}}{}}
    \renewcommand{\figurename}{\textsc{圖}}
    \renewcommand{\tablename}{\textsc{表}}
    """,
    "tableofcontents": r"""
    \tableofcontents
    \chapter*{前言}
    \addcontentsline{toc}{chapter}{前言}
    \fancyhead[LE,RO]{%s}
    """ % TITLE,
    # Additional stuff for the LaTeX preamble.
    'preamble': r"""
    % \pdfpagewidth 195mm
    % \pdfpageheight 271mm
    % \textwidth 6.0in
    % \textheight 8.8in
    % \oddsidemargin -0.1in
    % \evensidemargin -0.1in
    
    \textwidth 6.8in
    \oddsidemargin -0.2in
    \evensidemargin -0.3in
    
    \usepackage{pdfpages}
    \usepackage[BoldFont,CJKchecksingle]{xeCJK}
    
        \usepackage{fancyvrb} % for frame on Verbatim
        \usepackage{fancyhdr}
        \usepackage[T1]{fontspec}               %設定字體用
    
    \usepackage{float}
    \usepackage{ccaption}
    \usepackage{pifont}
    % \usepackage{fancybox}
    \usepackage{fontspec,xunicode,xltxtra}
    
    \setsansfont{Times New Roman}
    \setmainfont{Times New Roman}
    \setmonofont{Times New Roman}
    
    \setCJKsansfont[BoldFont={新細明體},ItalicFont={新細明體}]{新細明體}
    \setCJKromanfont[BoldFont={新細明體},ItalicFont={新細明體}]{新細明體}
    \setCJKmainfont[BoldFont={新細明體},ItalicFont={新細明體}]{新細明體}
    \setCJKmonofont[BoldFont={新細明體},ItalicFont={新細明體}]{新細明體}
    
        \makeatletter
        \def\verbatim@font{\rmfamily\small}     %為了讓 verbatim 註解中能夠加入中文, 採用 roman family 字體
        \makeatother
    
    \XeTeXlinebreaklocale "zh"  %讓中文自動換行
    \XeTeXlinebreakskip = 0pt plus 1pt
    \renewcommand{\baselinestretch}{1.3} 
    \setcounter{tocdepth}{3}
    \captiontitlefont{\small\sffamily}
    \captiondelim{ - }
    \renewcommand\today{\number\year年\number\month月\number\day日}      
    \makeatletter
    \renewcommand*\l@subsection{\@dottedtocline{2}{2.0em}{4.0em}}
    \renewcommand*\l@subsubsection{\@dottedtocline{3}{3em}{5em}}
    \makeatother
    \titleformat{\chapter}[display]
    {\bfseries\Huge}
    {\filleft \Huge 第 \hspace{2 mm} \thechapter \hspace{4 mm} 章}
    {4ex}
    {\titlerule
    \vspace{1ex}%
    \filright}
    [\vspace{1ex}%
    \titlerule]
    %\definecolor{VerbatimBorderColor}{rgb}{0.2,0.2,0.2}
    \definecolor{VerbatimColor}{rgb}{0.95,0.95,0.95}
    """,
    }
    
    # Grouping the document tree into LaTeX files. List of tuples
    # (source start file, target name, title, author, documentclass [howto/manual]).
    latex_documents = [
      ('index', 'cmsimple.tex', 'cmsimple Documentation',
       'the author', 'manual'),
    ]
    
    # The name of an image file (relative to this directory) to place at the top of
    # the title page.
    #latex_logo = None
    
    # For "manual" documents, if this is true, then toplevel headings are parts,
    # not chapters.
    #latex_use_parts = False
    
    # If true, show page references after internal links.
    #latex_show_pagerefs = False
    
    # If true, show URL addresses after external links.
    #latex_show_urls = False
    
    # Documents to append as an appendix to all manuals.
    #latex_appendices = []
    
    # If false, no module index is generated.
    #latex_domain_indices = True
    
    
    # -- Options for manual page output --------------------------------------------
    
    # One entry per manual page. List of tuples
    # (source start file, name, description, authors, manual section).
    man_pages = [
        ('index', 'cmsimple', 'cmsimple Documentation',
         ['the author'], 1)
    ]
    
    # If true, show URL addresses after external links.
    #man_show_urls = False
    
    
    # -- Options for Texinfo output ------------------------------------------------
    
    # Grouping the document tree into Texinfo files. List of tuples
    # (source start file, target name, title, author,
    #  dir menu entry, description, category)
    texinfo_documents = [
      ('index', 'cmsimple', 'cmsimple Documentation',
       'the author', 'cmsimple', 'One line description of project.',
       'Miscellaneous'),
    ]
    
    # Documents to append as an appendix to all manuals.
    #texinfo_appendices = []
    
    # If false, no module index is generated.
    #texinfo_domain_indices = True
    
    # How to display URL addresses: 'footnote', 'no', or 'inline'.
    #texinfo_show_urls = 'footnote'

::

    6. 進入 nginx_project 目錄, 執行:
    
.. code-block:: none

   make html

就可以在 build/html 目錄中產生對應的 html 格式電子書檔案.

.. code-block:: none

   make latex
   
就可以在 build/latex 目錄中產生對應的 latex 格式電子書檔案.

為了將 .tex 檔案轉換為 pdf 格式, 以 SciTE 編輯 makepdf.bat, 放入 latex 目錄中.

.. code-block:: none

    V:/extensions/portableLatex/MiKTeX/texmf/miktex/bin/xelatex.exe -interaction=nonstopmode %1
    V:/extensions/portableLatex/MiKTeX/texmf/miktex/bin/xelatex.exe -interaction=nonstopmode %1

在 latex 目錄中, 執行 (必須配合設定時所使用的專案名稱, 例如: nginx.tex):

.. code-block:: none

   makepdf nginx.tex
   
就可以順利產生 pdf 格式的電子書檔案.

.. _portable subversion client: http://portableapps.com/node/6767

.. _nginx book: http://code.taobao.org/p/nginx_book/src/trunk/

.. _First step with sphinx: http://sphinx-doc.org/tutorial.html
    
    
    
.. @+node:amd_yen.20130308214521.2439: *4* Leo 的文書處理
先以空標題進行架構區分
然後進入章節標題, 也是用來區分架構, 沒有內文資料

接著再利用 @file 將章節標題以下的內容存成 .txt, 位置在文書處理目錄的上位目錄, 此一內容應該是類似內容備份用

實際的 rest 格式內容則是利用 @rst 產生, 由於標題檔案名稱會被 rst 模組自動加上 .txt

而且此基本的 suffix 必須填入 conf.py 中, 也就是 source_suffix 變數

# The suffix of source filenames.
source_suffix = '.html.txt'

其中也必須在 conf.py 中宣告最重要的合併處理檔案, 也就是 master_doc 變數, master_doc 會自動被 Sphinx 冠上 suffix, 因此宣告時無須加上 prefix

# The master toctree document.
master_doc = 'leo_toc' # don't use any prefix.

位於 leo_toc.html.txt 中最重要的就是 toctree 指令, 其下為合併處理的章節檔案名稱.

例如:

    .. toctree::
       :maxdepth: 1
       :glob:

以下則列出要加入 toc 處理的各檔案名稱.

glob 參數則表示 Sphinx 會自動根據所提供的檔案名稱搜尋要加入個別檔案.

若在 index.rst 中所要加入的檔案為數眾多, 則可根據規律以程式產生, 在整合文書處理環境下, 也可以利用程式產生所需要的 index.rst 檔案.

.. code-block:: python

    #coding: utf-8
    學號頭碼 = "401231"
    
    for i in range(1,57):
        if len(str(i)) == 1:
            尾碼 = "0"+str(i)
        else:
            尾碼 = str(i)
        print(學號頭碼+尾碼)
.. @+node:amd_yen.20130308214521.2440: *4* SciTE 設定
為了讓 SciTE 可以在開啟檔案內容變更時, 自動在編輯區內反應最新變更後的內容, 必須修改

SciTEGlobal.properties 中的設定值:

.. code-block:: none

   load.on.activate=1
   save.on.deactivate=1

詳細說明如下:

The load.on.activate property causes SciTE to check whether the current file has been updated by another process whenever it is activated. This is useful when another editor such as a WYSIWYG HTML editor, is being used in conjunction with SciTE.

The save.on.deactivate property causes SciTE to save the file whenever the SciTE application loses focus. This is useful when developing web pages and you want to often check the appearance of the page in a browser.
.. @+node:amd_yen.20130308214521.2441: *5* @url SciTE 設定說明
http://www.scintilla.org/SciTEDoc.html

SciTE 線上說明文件
.. @+node:amd_yen.20130309155804.1712: *3* C2 第四週
Python 3.3 本體的基本運算功能範例

pip 的模組安裝指令

Python 的 Windows COM 應用
    Python 與 SolidWorks
    Python 與 Word
    Python 與 Excel
    Python 與 Inventor

Python 的 PIL 應用範例

Python 的 matplotlib 應用範例

Python 的 numpy 與 scipy 應用範例

機械設計與製造加工的最佳化問題

    平面上的特定鑽孔最短路徑 `Travelling salesman problem`_
    
    材料切割最佳化 `Knapsack problem`_
    
    其他設計最佳化 (滿足約束條件下) Volume maximization
    
        已知 SURFACE = 80
        且 z=(SURFACE - x*y)/(2.*(x+y))
        最大化 x*y*z
        
        數值分析方法 (Numerical analysis)
        
        符號式分析方法 (Symbolic analysis)

分散式演化框架: `DEAP`_

仿生智能運算框架: `INSPYRED`_

.. _Travelling salesman problem: http://en.wikipedia.org/wiki/Travelling_salesman_problem

.. _Knapsack problem: http://en.wikipedia.org/wiki/Knapsack_problem

.. _DEAP: https://code.google.com/p/deap/

.. _INSPYRED: https://pypi.python.org/pypi/inspyred

Python 的 sympy 應用範例

Python 的 PyQT 應用範例

Python 的 CherryPy 應用程式開發
.. @+node:amd_yen.20130317002834.1537: *4* @url Python3 基本功能
http://en.wikibooks.org/wiki/Non-Programmer's_Tutorial_for_Python_3

這是一份有關 Python3 基本功能介紹的資料.

機械設計工程師需要程式作甚麼?

網路上的一段有趣提問:

http://www.engineergirl.org/Engineers/Directory/2929/9759/570.aspx

Question: Hi, I was wondering what is mechanical engineering and what they do? I am considering becoming a mechanical engineer after I become a computer programmer. Also does computer programming help in mechanical engineering? Does taking the International Baccalaureate program help in the engineering field? Also I am entering highschool and am going to be taking the IB program.

posted by Tierra, MD on March 30, 2012

Answer 1 by Dr. Karen Thole

Dear Tierra from Md: 

It is very exciting to hear of your interest in mechanical engineering. I will attempt to address a few of your questions: It is difficult to say what mechanical engineers do not do in terms of jobs. Our Penn State mechanical engineers do so many things: they work on designing new hospital buildings, new airplanes, new wind turbines, new surgical instruments, energy efficient buildings, comfortable chairs, and so much more. 

We have some mechanical engineers who are now designing a kindle for the blind! Mechanical engineers not only design many exciting products, they also venture into managing large projects and companies; become patent attorneys; research exciting breakthroughs such as those needed in energy storage; and even become medical doctors! And, yes, mechanical engineers do a significant amount of computer programming, which they use as a tool to predict things like how fast our stomach dissolves medication, how to design better airplane wings, and how to make cars that require less fuel. 

MEs do lots of computer programing, but with an intention of making predictions for better products. Finally, I'm not exactly sure what you mean by an IB degree. As an aside, we do not require this, but do have a strong emphasis in our program on making sure the MEs that we educate have a global view of engineering. For example, our Penn State ME students are now working with students in China, Singapore, and Korea to come up with better designs requested by many companies. This is an exciting program and our students are getting a much better view of the world through working in multi-national teams. I hope this is helpful and I wish you the very best of success. Hopefully, I will see you at Penn State one day enrolled as an ME student! Professor Thole

Answer 2 by Miss Marita Cheng

Hi Tierra, A mechanical engineer uses physics and material science to solve real-world problems, such as working on car engines, rockets and planes; manufacturing plants, and medical devices. Doing computer programming before doing engineering will definitely help, especially in the field of robotics, and anything that requires a system to be programmed. 

Having a degree in both computer programming and mechanical engineering will definitely give you an edge in the field. The IB is a great program to do if you want to study engineering, as the IB encourages students to think outside of the box, which is something engineers have to do everyday. Engineering is a great field to study, as there are so many opportunities for you to travel around the world, but more importantly, to improve the lives of millions of people. Good luck with your studies! Regards, Marita

另外一份則是有關機械設計領域的要求:

http://www.fvtc.edu/public/academics/degree.aspx?plan=10-606-1

Program Outcomes

Mechanical Design Technology graduates will be able to:

Use appropriate problem-solving methods to identify, analyze and solve problems in an engineering environment.

Select and utilize various CAD and other engineering application software.

Continue their own personal goals through achieving additional technical skills.

Prepare mechanical drawings which communicate design and details for fabrication and/or assembly.

Design products in accordance with customer specifications.

Communicate design ideas using a variety of communication methods.

Function effectively and productively within a team-focused work group.

Provide a base for life-long learning.

泛機械工程師的基本要求:

http://www.wisegeek.com/what-skills-are-needed-for-mechanical-engineer-employment.htm

Mechanical engineers research, design, and build machines and equipment of all types. They can specialize in designing engines, automobiles, consumer products, electronics, or heavy machinery, among other areas. There are several important technical and personal skills that an individual looking for employment in this field should possess. A successful engineer is creative, efficient, detail-oriented, and mechanically inclined. He or she must be a master of computer design and have specialized knowledge of physics and electricity in order to produce efficient, reliable machines.

Many different personal traits and skills are necessary to secure mechanical engineer employment. Professionals need to have strong problem-solving skills in order to invent and test new designs. Creativity and perseverance are essential in trial-and-error experiments with prototypes. Most engineers need strong communication skills as well, as they are frequently required to work in teams with other engineers and correspond with management and patent office workers. They also need strong educational backgrounds in math and physics to help them calculate statistics and determine the most efficient ways of putting machines together.

機械工程師的基本能力要求:

http://www10.hrsdc.gc.ca/English/ShowProfile.aspx?v=232

其中, 對於電腦應用方面的能力要求:

H. Computer Use

Tasks Complexity Level

Examples

Typical 2 to 3

Most Complex 4 to 5

Mechanical Engineers

use databases. For example, they consult vendor databases in Access for equipment specifications to identify models that meet their needs. They also access client contact information, project histories, maintenance services performed and problems encountered by using search features of customer management software programs. (2)

use financial software. For example, they may prepare project and annual operating budgets using the basic features of financial software programs such as QuickBooks. (2)

use communications software. For example, they may use Outlook to exchange e-mail with attached documents with co-workers, colleagues and clients. (2)

use word processing software. For example, they use Word to write letters to clients, vendors and contractors using standard templates. They also write analysis reports and books of specifications containing tables of contents, heading levels, tables, graphs, imported pictures and bulleted lists. (3)

use graphics software. For example, they use PowerPoint to present the results of analysis reports by using text, tables, graphs, pictures and animations. (3)

use spreadsheet software. They set-up or create spreadsheets such as Excel to collect data and create schedules and budgets. For example, they plan project budgets, complete expense reports, monitor project expenditures, project schedules and person-hours worked. They may create models to solve complicated math equations by using advanced features of spreadsheet software. (3)

use statistical analysis software. For example, they may conduct reliability studies and data analyses using the advanced features of statistical analysis software such as SPSS. (3)

use computer-assisted design, manufacturing and machining software. For example, they may draw mechanical plans using AutoCAD. They create three-dimensional models using advanced features of three-dimensional modelling software and enter data of the architectural and engineering plans and of existing structures into the software before drawing the mechanical structures. (3)

use Internet software. For example, they use Internet Explorer to find information on new products and technologies using search engines. They may also move large electronic files to customers using Internet file transfer protocol. Mechanical engineers may access web servers remotely using virtual private network protocols. For example, they access and analyze vibration monitoring data at customer locations via the Internet. They also download data from customer sites to their servers for further analysis. (3)

may use other software. For example, they may plan, schedule and monitor projects using the advanced features of project management software. They may view digital site photographs using image viewer software. They may use various specialized software to identify the preventive maintenance required for machinery and equipment, conduct vibration analysis of machines and develop reports of thermal imaging and measurement. (3)

may do programming, system and software design. For example, they may program robots using Programmable Logic Controllers such that the robots can interface with other robots and existing equipment. (5)

Computer Use Summary

The symbol √ is explained in the Use of Symbols section.

.. code-block:: none

    √  Use word processing. (運用文書處理系統)
    √  Use graphics software. (運用圖形處理軟體)
    √  Use a database. (運用資料庫)
    √  Use a spreadsheet. (運用試算表)
    √  Use financial software. (運用財務軟體)
    √  Use statistical analysis software. (運用統計分析軟體)
    √  Do programming or systems and software design. (執行程式或系統與軟體設計)
    √  Use computer-assisted design, manufacture or machining. (運用電腦輔助設計製造或加工)
    √  Use communications software. (運用通訊軟體)
    √  Use Internet (運用網際網路)
    √  Other
.. @+node:amd_yen.20130317094520.1538: *4* 機械設計工程師的 Python3
以下資料為 mp3 考試的題目來源之一:

Introduction to programming

The intent of this text is to introduce you to computer programming using the Python
programming language. Learning to program is a bit like learning to play piano, although
quite a bit easier since we won't have to program while keeping time according to a time
signature. Programming is a creative process so we'll be working on developing some
creative skills. At the same time, there are certain patterns that can be used over and over
again in this creative process. The goal of this text and the course you are taking is to get
you familiar with these patterns and show you how they can be used in programs. After
working through this text and studying and practicing you will be able to identify which
of these patterns are needed to implement a program for a particular task and you will be
able to apply these patterns to solve new and interesting problems.

As human beings our intelligent behavior hinges on our ability to match patterns. We
are pattern-matchers from the moment we are born. We watch and listen to our parents
and siblings to learn how to react to situations. Babies watch us to learn to talk, walk, eat,
and even to smile. All these behaviors are learned through pattern matching. Computer
Science is no different. Many of the programs we create in Computer Science are based
on just a few patterns that we learn early in our education as programmers. Once we've
learned the patterns we become effective programmers by learning to apply the patterns
to new situations. As babies we are wired to learn quickly with a little practice. As we
grow older we can learn to use patterns that are more abstract. That is what Computer
Science is all about: the application of abstract patterns to solve new and interesting prob-
lems.

PRACTICE is important. There is a huge difference between reading something in this
text or understanding what is said during a lecture and being able to do it yourself. At times
this may be frustrating, but with practice you will get better at it. As you read the text make
sure you take time to do the practice exercises. Practice exercises are clearly labeled with
a gray background color. These exercises are your chance to use a concept that you have
just learned. Answers to practice exercises are included at the end of each chapter so you
can check your answers.

What is Python?

Python is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. Python combines remarkable power with very clear syntax.  It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++.  It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants, on the Mac, and on Windows 2000 and later.

Are there copyright restrictions on the use of Python?

You can do anything you want with the source, as long as you leave the copyrights in and display those copyrights in any documentation about Python that you produce. If you honor the copyright rules, it's OK to use Python for commercial use, to sell copies of Python in source or binary form (modiﬁed or unmodiﬁed), or to sell products that incorporate Python in some form. We would still like to know about all commercial use of Python, of course.

Why was Python created in the ﬁrst place?

Here's a very brief summary of what started it all, written by Guido van Rossum:

I had extensive experience with implementing an interpreted language in the ABC group at CWI,
and from working with this group I had learned a lot about language design.  This is the origin of
many Python features, including the use of indentation for statement grouping and the inclusion of
very-high-level data types (although the details are all different in Python).

I had a number of gripes about the ABC language, but also liked many of its features. It was impos-
sible to extend the ABC language (or its implementation) to remedy my complaints – in fact its lack
of extensibility was one of its biggest problems. I had some experience with using Modula-2+ and
talked with the designers of Modula-3 and read the Modula-3 report. Modula-3 is the origin of the
syntax and semantics used for exceptions, and some other Python features.

I was working in the Amoeba distributed operating system group at CWI. We needed a better way to
do system administration than by writing either C programs or Bourne shell scripts, since Amoeba
had its own system call interface which wasn't easily accessible from the Bourne shell.  My expe-
rience with error handling in Amoeba made me acutely aware of the importance of exceptions as a
programming language feature.

It occurred to me that a scripting language with a syntax like ABC but with access to the Amoeba
system calls would ﬁll the need.  I realized that it would be foolish to write an Amoeba-speciﬁc
language, so I decided that I needed a language that was generally extensible.

During the 1989 Christmas holidays, I had a lot of time on my hand, so I decided to give it a try. Dur-
ing the next year, while still mostly working on it in my own time, Python was used in the Amoeba
project with increasing success, and the feedback from colleagues made me add many early improve-
ments.

In February 1991, after just over a year of development, I decided to post to USENET. The rest is in
the Misc/HISTORY ﬁle.

What is Python good for?

Python is a high-level general-purpose programming language that can be applied to many different classes of problems.

The language comes with a large standard library that covers areas such as string processing (regular expressions, Unicode, calculating differences between ﬁles), Internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP, CGI programming), software engineering (unit testing, logging, proﬁling, parsing Python code), and operating system interfaces (system calls, ﬁlesystems, TCP/IP sockets).  Look at the table of contents for library-index to get an idea of what's available.  A wide variety of third-party extensions are also available.

其他參考資料:

http://nematodes.org/martin/teaching/introduction-to-python-for-biologists/

introduction to python for mechanical design engineers

機械設計工程師的 Python 程式簡介

applied python for mechanical design engineers

機械設計工程師的 Python 程式應用

applied python 1 - python3 and engineering calculation

>>> import math

>>> math . exp (1.0)

2.7182818284590451

Using the dir function, we can see the directory of objects available in the math module:

>>> dir ( math )

[ ' __doc__ ' , ' __file__ ' , ' __name__ ' , ' acos ' , ' asin ' , ' atan ' , ' atan2 ' ,
' ceil ' , ' cos ' , ' cosh ' , ' degrees ' , 'e ' , ' exp ' , ' fabs ' , ' floor ' ,
' fmod ' , ' frexp ' , ' hypot ' , ' ldexp ' , ' log ' , ' log10 ' , ' modf ' , ' , ' pi ' ,
' pow ' , ' radians ' , ' sin ' , ' sinh ' , ' sqrt ' , ' tan ' , ' tanh ']

>>> math . pi

3.1415926535897931

>>> math . e

2.7182818284590451

>>> math . cos ( math . pi )

-1.0

>>> math . log ( math . e )

1.0

applied python 2 - Vpython, PyGame and STL viewer

函式定義:

寫一個 distance(a, b) 函式, 可以傳回 a 數值與 b 數值差的絕對值.

寫一個 convert_to_metric(a, b) 函式, 可以計算邊長分別為 a 與 b 公分的矩形, 其平方英吋的面積.

寫一個函式 balls_in_space(n, r, d), 執行時, 可以顯示 n 個半徑為 r 的球, 排成一直線, 球心距離為 d.

寫一個函式 stl_ascii_to_binary(mypart.stl), 執行時, 可以開啟文字格式的 stl 零件檔, 並且轉寫為二位元格式的 stl 零件檔.

寫一個函式 stl_viewer(mypart.stl), 執行時, 可以自動判別 stl 格式為文字或二位元格式, 並將零件顯示在視窗畫面.

applied python 3 - Docutils, Sphinx and LaTeX

利用 Python 進行文書處理

applied python4 - Pyforum in CherryPy, Mako and Pybean

利用 Python 進行產品資料管理
    
.. @+node:amd_yen.20130317094520.1539: *5* @url after hours programming
http://www.afterhoursprogramming.com/tutorial/Python/Overview/

以上內容的 mp3 朗讀: http://cae.mde.tw?download=c2mp3.7z (考試範圍)





.. @+node:amd_yen.20130317160119.1723: *5* @url Scientific computing Python
http://www.scientificpython.net/
.. @+node:amd_yen.20130317160119.1724: *5* @url Python scientific lectures
http://scipy-lectures.github.com/
.. @+node:amd_yen.20130317160119.1725: *5* @url  Python for computational engineering
http://www.southampton.ac.uk/~fangohr/training/python/pdfs/Python-for-Computational-Science-and-Engineering.pdf

Slides: http://www.southampton.ac.uk/~fangohr/training/python/pdfs/Python-for-Computational-Science-and-Engineering-slides.pdf
.. @+node:amd_yen.20130310215908.1491: *4* tkinter
.. code-block:: python
    :linenos:

    #coding: utf-8
    from tkinter import *
    root = Tk(className="視窗標題")
    w = Label(root, text = "第一個視窗程式")
    w.pack()
    root.mainloop()
    
單位換算視窗程式:

.. code-block:: python
    :linenos:

    from tkinter import *
    from tkinter import ttk
    
    # source: http://www.tkdocs.com/tutorial/firstexample.html
    def calculate(*args):
        try:
            value = float(feet.get())
            meters.set((0.3048 * value * 10000.0 + 0.5)/10000.0)
        except ValueError:
            pass
        
    root = Tk()
    root.title("Feet to Meters")
    
    mainframe = ttk.Frame(root, padding="3 3 12 12")
    mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
    mainframe.columnconfigure(0, weight=1)
    mainframe.rowconfigure(0, weight=1)
    
    feet = StringVar()
    meters = StringVar()
    
    feet_entry = ttk.Entry(mainframe, width=7, textvariable=feet)
    feet_entry.grid(column=2, row=1, sticky=(W, E))
    
    ttk.Label(mainframe, textvariable=meters).grid(column=2, row=2, sticky=(W, E))
    ttk.Button(mainframe, text="Calculate", command=calculate).grid(column=3, row=3, sticky=W)
    
    ttk.Label(mainframe, text="feet").grid(column=3, row=1, sticky=W)
    ttk.Label(mainframe, text="is equivalent to").grid(column=1, row=2, sticky=E)
    ttk.Label(mainframe, text="meters").grid(column=3, row=2, sticky=W)
    
    for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5)
    
    feet_entry.focus()
    root.bind('<Return>', calculate)
    
    root.mainloop()
    
一般計算機:

.. code-block:: python
    :linenos:
    
    #coding: utf8
    '''
    簡單的 tkinter 計算機
    '''
    # 來源: http://bsspirit.appspot.com/20101222/python3-Tkinter-Calculator.html
    
    from tkinter import *
    from tkinter.font import Font
    
    def 按鍵(框架, 文字, 執行函式=None):
        字型 = Font(family=('Verdana'), size=14)
        return Button(框架, text=文字, font=字型, width=3, command=執行函式)
    
    def 框架(框架, 對齊=LEFT, 背景顏色="black"):
        框架 = Frame(框架, background=背景顏色, padx=5, pady=5)
        框架.pack(side=對齊, expand=YES, fill=BOTH)
        return 框架
    
    class 應用程式:
        def __init__(self, 視窗):
            字型 = Font(family=('Verdana'), size=14)
            主視窗 = 框架(視窗)
    
            左邊框架 = 框架(主視窗)
            右邊框架 = 框架(主視窗)
            計算區 = 框架(左邊框架)
            
            self.輸入 = Entry(計算區, font=字型, width=15, background="white")
            self.輸入.pack(side=TOP)
    
            self.按鍵框架 = 框架(計算區)
    
            x, y = 0, 0
            for 按鍵配置 in ("()%C", "+-*/", "1234", "5678", "90.="):
                for 字元 in 按鍵配置:
                    if 字元 == "=":
                        類別按鍵 = 按鍵(self.按鍵框架, 字元, self.計算動作)
                    elif 字元 == "C":
                        類別按鍵 = 按鍵(self.按鍵框架, 字元, self.清除畫面)
                    else:
                        類別按鍵 = 按鍵(self.按鍵框架, 字元, lambda 內容=字元: self.輸入.insert(INSERT, 內容))
                        
                    類別按鍵.grid(row=x, column=y)
                    y += 1
    
                x += 1
                y = 0
    
            self.紀錄 = Text(右邊框架, font=Font(family=('Verdana'), size=10), width=25, height=14, background="yellow")
            self.紀錄.pack(side=RIGHT)
    
        def 清除畫面(self):
            self.輸入.delete(0, END)
    
        def 計算動作(self):
            暫存 = self.輸入.get()
            try:
                結果 = 暫存 + "=" + str(eval(暫存))
                self.紀錄.insert(1.0, 結果 + "\n");
                print(結果)
            except Exception:
                self.紀錄.insert(1.0, "抱歉! 發生錯誤\n");
    
    
    if __name__ == '__main__':
        視窗= Tk()
        視窗.title("計算機")
        #視窗.geometry()
        我的應用程式 = 應用程式(視窗)
        視窗.mainloop()
        
請以組為單位, 將上述一般計算機改為工程用計算機程式.

參考資料:

http://infohost.nmt.edu/tcc/help/pubs/tkinter.pdf

http://www.tkdocs.com/tutorial/

https://github.com/doctoboggan/PYQT-Calculator

https://github.com/smjrifle/Python-Calculator
.. @+node:amd_yen.20130313165007.1510: *4* matplotlib
結合 matplotlib 與 tkinter

.. code-block:: python
    :linenos:
    
    #! /usr/bin/env python
    # source: https://github.com/ondrejh/matplot_embed
    import matplotlib
    matplotlib.use('TkAgg')
    
    from numpy import arange, sin, pi
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
    from matplotlib.figure import Figure
    
    import sys
    #import everything from tkinter module (Tkinter in python 2.x)
    try:
            from tkinter import *
    except:
            from Tkinter import *
    
    #application class
    class runapp(Frame):
        ''' dummy gui '''
        
        def __init__(self,master=None):
            self.root = Tk()
            self.root.title('Embedding MATPLOTLIB in TK')
            Frame.__init__(self,master)
            self.createWidgets()
        
        def createWidgets(self):
    
            self.f = Figure(figsize=(5,4), dpi=100)
            self.a = self.f.add_subplot(111)
            self.t = arange(0.0,3.0,0.01)
            self.n = 1
            self.s = sin(pi*self.t*self.n)
    
            self.a.plot(self.t,self.s)
            self.a.set(xlabel='x')
            self.a.set(ylabel='y')
    
            # a tk.DrawingArea
            self.canvas = FigureCanvasTkAgg(self.f, master=self.root)
            self.canvas.show()
            self.canvas.get_tk_widget().pack(side=TOP, fill=BOTH, expand=1)
    
            '''self.toolbar = NavigationToolbar2TkAgg(self.canvas, self.root)
            self.toolbar.update()
            self.canvas._tkcanvas.pack(side=TOP, fill=BOTH, expand=1)'''
    
            self.frmButtons = Frame(master=self.root)
            self.frmButtons.pack()
            self.buttonAdd = Button(master=self.frmButtons,text='Inc',command=self.fIncClick)
            self.buttonAdd.pack(side=LEFT)
            self.buttonSub = Button(master=self.frmButtons,text='Dec',command=self.fDecClick)
            self.buttonSub.pack(side=LEFT)
    
        def fIncClick(self):
            self.n += 1
            self.fRedraw()
    
        def fDecClick(self):
            if self.n>1:
                self.n -= 1
                self.fRedraw()
    
        def fRedraw(self):
            self.s = sin(pi*self.t*self.n)
            self.a.clear()
            self.a.plot(self.t,self.s)
            self.a.set(xlabel='x')
            self.a.set(ylabel='y')
            self.canvas.show()
                
        def _quit(self):
            print('kooonec')
            self.root.quit()     # stops mainloop
            self.root.destroy()  # this is necessary on Windows to prevent
                        # Fatal Python Error: PyEval_RestoreThread: NULL tstate
    
    app = runapp()
    app.mainloop()
    # If you put root.destroy() here, it will cause an error if
    # the window is closed with the window manager.
.. @+node:amd_yen.20130310161307.1486: *4* PyQt 應用
可以直接在 Leo Editor 中執行的 PyQt 程式:

.. code-block:: python
    :linenos:
    
    from PyQt4 import QtGui
    w = QtGui.QWidget()
    w.resize(250, 150)
    w.move(300, 300)
    w.setWindowTitle('Simple test')
    w.show()
    c.brian_test_w = w

機械設計視窗程式:

.. literalinclude:: ../c2/pyqt_geardesign.py
    :language: python
.. @+node:amd_yen.20130317160119.1728: *4* @url WinPython
https://code.google.com/p/winpython/

這是一套專門設計用於 Windows 環境的可攜 Python 程式開發環境, 基本設計理念與 portableKMOL 類似, 解開後容量為 540 MB.

基本特點:
.. @+node:amd_yen.20130330144838.1766: *3* C2 第五週
協同報告架構 - 請參考 C2G1

是否可以將此架構與 Pyforum 網際程式結合?
.. @+node:amd_yen.20130330144838.1767: *3* C2 第六週
期中專案

利用 Python Tutor 與其他線上 Python3 教學套件, 整理 Python3 教學內容, 主要學習項目為:

::

    協同報告模式採: https://github.com/chiamingyen/mdeCourse

    網際框架參考: https://github.com/chiamingyen/leo_pyforum

    互動程式參考: https://github.com/bnmnetp/runestone

    互動程式參考: http://docs.runestoneinteractive.org/build/html/index.html

字串列印, 資料輸入, 整數與浮點數轉字串, 數值基本運算, 資料類別, Python 關鍵字: (and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, raise, range, return, try, while, with, yield, True, False, None), 程式廻圈, 程式判斷式, math 與 random 模組, 函式定義與呼叫, 函式傳值與不傳值, 數列與元組, 檔案輸出入. 

字串列印:

.. code-block:: python

    print("字串內容")
    print("數值為:"+str(10.5))
    print("數值為:",10.5)
    print("數值為:"+str(10+float("0.5")))

資料輸入:

.. code-block:: python

    輸入值 = input("請輸入數值:")
    print("輸入值為:"+輸入值)
    print("輸入值加上1等於:"+str(1+float(輸入值)))

整數與浮點數轉字串:

.. code-block:: python

    整數值 = 1
    浮點數值 = 0.1
    print("將"+str(整數值)+"加上"+str(浮點數值)+"等於"+str(整數值+浮點數值))

數值基本運算:

.. code-block:: python
    import math
    print("圓週率為:"+str(math.pi))

資料類別:

.. code-block:: python

    print(type(0.1))
    print(type(10))
    print(type("字串"))

Python 關鍵字用法彙整:

.. code-block:: python

    def 函式(輸入):
        輸出 = 0
        for 索引 in range(輸入+1):
            輸出  = 輸出 + 索引
        return 輸出
    
    累加至 = 10
    if type(累加至).__name__ != "int":
        print(累加至, "不是整數, 無法累加!")
    else:
        變數 = 函式(累加至)
        print(變數)
    
    累加至 = 10.1
    if type(累加至).__name__ != "int":
        print(累加至, "不是整數, 無法累加!")
    else:
        變數 = 函式(累加至)
        print(變數)

math 與 random 模組用法:

函式定義與呼叫:

數列與元組:

檔案輸出入:

期末專案

項目一: 工程單位轉換與網際程式開發

::

單位轉換參考: https://bitbucket.org/kiv/unum/src

Python 在動態機構模擬上的應用: double pendulum

https://github.com/gilbertgede/pydy_examples

http://www.pydy.org/double_pendulum

自行車動態模擬: 

http://docs.sympy.org/dev/modules/physics/mechanics/examples.html#the-bicycle

https://github.com/hazelnusse/bicycle.model

.. code-block:: python

    from sympy import symbols  
    from sympy.physics.mechanics import *
     
    q1, q2 = dynamicsymbols('q1 q2')
    q1d, q2d = dynamicsymbols('q1 q2', 1)
    u1, u2 = dynamicsymbols('u1 u2')
    u1d, u2d = dynamicsymbols('u1 u2', 1)
    l, m, g = symbols('l m g')
     
    N = ReferenceFrame('N')
    A = N.orientnew('A', 'Axis', [q1, N.z])
    B = N.orientnew('B', 'Axis', [q2, N.z])
     
    A.set_ang_vel(N, u1 * N.z)
    B.set_ang_vel(N, u2 * N.z)
     
    O = Point('O')
    P = O.locatenew('P', l * A.x)
    R = P.locatenew('R', l * B.x)
     
    O.set_vel(N, 0)
    P.v2pt_theory(O, N, A)
    R.v2pt_theory(P, N, B)
     
    ParP = Particle('ParP', P, m)
    ParR = Particle('ParR', R, m)
     
    kd = [q1d - u1, q2d - u2]
    FL = [(P, m * g * N.x), (R, m * g * N.x)]
    BL = [ParP, ParR]
     
    KM = KanesMethod(N, q_ind=[q1, q2], u_ind=[u1, u2], kd_eqs=kd)
     
    (fr, frstar) = KM.kanes_equations(FL, BL)
    kdd = KM.kindiffdict()
    mm = KM.mass_matrix_full
    fo = KM.forcing_full
    qudots = mm.inv() * fo
    qudots = qudots.subs(kdd)
    qudots.simplify()
    mechanics_printing()
    mprint(qudots)


項目二: 2D 基本繪圖與 STL 零件檔案轉換

1. 使用者上傳 2D 繪圖資料檔案 (例如: Sin(t), Cos(t) 或其他函式數值資料檔), 網際程式繪圖後轉為 png 格式存檔.

學習重點在於 Python 的平面繪圖, 網際檔案上傳與資料處理

Pybean 與 SQLite 資料庫的使用

2. 使用者上傳 ASCII STL 格式 3D 零件檔案, 網際程式轉為 Binary STL 格式 3D 零件檔案, 並且分別於瀏覽器展示零件檔案.

STL ASCII 與 binary 格式的資料處理

Python 程式應用項目:

類別與物件導向, 資料庫, 網際框架與 template engine, 字典, 2D 繪圖, 3D 繪圖, 工程資料轉檔.
.. @+node:amd_yen.20130406103207.2443: *3* C2 第七週
程式題目:

1. 寫一個程式, 可以接受使用者三個數值的輸入, 然後將三個輸入值的平均數印出.

2. 寫一個程式, 可以接受使用者輸入英吋, 程式會將所輸入的英吋轉為公分後印出數值.

3. 寫一個網際程式, 在瀏覽器中有三個資料輸入欄位, 當使用者在三個欄位填入數值送出後, 可以直接在瀏覽器中印出所輸入三個數值的平均數.

4. 寫一個網際程式, 在瀏覽器中有三個資料輸入欄位, 其中兩個欄位可以讓使用者輸入學號與姓名, 而第三個欄位則可以填入三行以上的文字資料, 使用者填完後, 按下送出鍵後, 程式會列出輸入者的學號與姓名, 並且提供一個按鍵連結, 使用者點後該連結後, 可以下載先前所輸入的文字資料檔案.

5. 寫一個網際程式, 可以在瀏覽器中接受使用者上傳一個文字檔案, 其中文字檔案的格式為:

學號    成績
101      80
102      82
103      84
104      85

當使用者完成檔案上傳後, 該網際程式會解讀所上傳的檔案, 並且印出四位同學該次考試的平均成績.

6. 假如要將上述程式中有關的資料存入資料庫, 應該如何進行.

.. code-block:: python

    #encoding: utf-8
    from pybean import Store, SQLiteWriter
    # 將資料存入記憶體中, frozen=False 表示可以動態新增表格與欄位
    #library = Store(SQLiteWriter(":memory:", frozen=False))
    # 將資料存入 sqlite 資料庫檔案中, frozen=False 表示可以動態新增表格與欄位
    # 設定 frozen=False 表示可以 create tables and columns on the fly
    library = Store(SQLiteWriter("database.sqlite", frozen=False))
    # 動態建立 book 資料表
    book = library.new("book")
    # 印出與 book 資料表對應的唯一序號
    print (book.uuid.hex)
    # 動態建立 title 欄位
    book.title = "如何使用 Pybean 儲存資料"
    # 動態建立 author 欄位
    book.author = "Pybean 作者群"
    # 儲存資料表內容
    library.save(book)
    # 利用 find 方法搜尋資料表中的資料
    # 找出 book 資料表中 author 為 "Pybean 作者群" 的資料
    for book in library.find("book","author like ?",["Pybean 作者群"]):
            # 列印資料表中的 title 欄位
            print (book.title)
    # 搜尋資料的筆數
    資料筆數 = library.count("book")
    搜尋資料筆數 = library.count("book", "author like ?", ["Pybean 作者群"])
    # 1 代表 true:沒有特別加入其他篩選條件, 排序內定為 asc, 反向排為 desc
    搜尋資料筆數 = library.count("book", "1 order by author")
    # 以 find_one 找出所要的一筆資料
    一筆資料 = library.find_one("book","author=?",["Pybean 作者群"])
    # 針對所搜尋出的一筆資料進行修改
    一筆資料.author = "修改後的資料"
    # 將修改後的一筆資料存入資料表中
    library.save(一筆資料)
    # 假如要刪除所找出的一筆資料, 使用 delete
    #libry.delete(一筆資料)
    print(資料筆數)
    print(搜尋資料筆數)
    print(一筆資料.title,"_",一筆資料.author)
     
    # 列出目前的資料庫內容
    for book in library.find("book","1"):
            # 列印資料表中的 title 欄位
            print (book.title, book.author)
     
    # 刪除資料表中 book bean 的對應資料
    #library.delete(book)
    
採用 uuid 的 pybean 版本:

使用此一 uuid 版本的關鍵在於, 必須 from uuid import UUID, 並且利用 UUID(uuid).bytes 將 uuid 字串內容轉為 SQLite3 的 blob 資料格式, 才能正確對應到唯一的資料列.

一筆資料 = library.find_one(“student”,”uuid=?”,[UUID(uuid).bytes])

基本的 pybean 使用範例

.. code-block:: python

    #coding: utf-8
    from pybean import Store, SQLiteWriter
    # "frozen=True" means the SQLiteWriter won't create tables and columns on the fly
    # 使用 frozen = False 表示可以動態建立資料表
    library = Store(SQLiteWriter("database.sqlite", frozen=False))
    # 建立  book 資料 bean, 也就是建立一個名稱為 book 的資料表
    book = library.new("book")
    # 動態建立 book 資料表中的 title 欄位, 且將字串值放入此一 book 資料表中的 title 欄位
    book.title = "第一本書的標題"
    # 再動態建立 author 欄位, 且將字串值放入此一 author 欄位
    book.author = "第一本書的作者"
    # 儲存資料表 book 中的資料
    library.save(book)
    # 利用資料庫檔案中的 find 方法搜尋 book 資料表, 找出其中 author 欄位值有 "Charles Xavier" 字串的資料
    for book in library.find("book","author like ?",["第一本書的作者"]):
            # 若找到對應資料, 印出 book 資料表中 title 欄位的資料
            print (book.title)
    # 找出資料表中的所有資料
    # find all books, find method returns an iterator
    print(library.find("book"))
    print(library.find("book","1"))
    for book in library.find("book","1"):
        print (book.title)
    # 再建立 bean 與輸入資料值
    # 建立  book 資料 bean, 也就是建立一個名稱為 book 的資料表
    book = library.new("book")
    # 動態建立 book 資料表中的 title 欄位, 且將字串值放入此一 book 資料表中的 title 欄位
    book.title = "這是書的標題"
    # 再動態建立 author 欄位, 且將字串值放入此一 author 欄位
    book.author = "書的作者"
    # 儲存資料表 book 中的資料
    library.save(book)
    number_of_books = library.count("book")
    number_of_書_books = library.count("book", "author like ?", ["書的作者"])
    print(number_of_books,number_of_書_books)
    # 刪除此一 book 資料表內容 (請注意 book 為對應 book = library.new("book") 之後的內容資料
    library.delete(book)
    number_of_books = library.count("book")
    number_of_書_books = library.count("book", "author like ?", ["書的作者"])
    print(number_of_books,number_of_書_books)
    for book in library.find("book"):
        print (book.title, book.author)
    # 這是 pybean 0.2.1 版的新用法
    #library.commit()

.. code-block:: python

    #coding: utf-8
    # 目前版本僅支援 sqlite3
    import sqlite3
    import uuid
    from pkg_resources import parse_version
     
    __version__ = "0.1.2"
    __author__ = "Mickael Desfrenes"
    __email__ = "desfrenes@gmail.com"
     
     
    class SQLiteWriter(object):
     
        """
        In frozen mode (the default), the writer will not alter db schema.
        Just add frozen=False to enable column creation (or just add False
        as second parameter):
     
        query_writer = SQLiteWriter(":memory:", False)
        """
        def __init__(self, db_path=":memory:", frozen=True):
            # 為了讓 sqlite3 可以跨不同的執行緒運作, 設定 check_same_thread = False
            # Yen add check_same_thread = False
            self.db = sqlite3.connect(db_path, check_same_thread = False)
            self.db.row_factory = sqlite3.Row
            self.frozen = frozen
            self.db.cursor().execute("PRAGMA foreign_keys=ON")
        def __del__(self):
            self.db.close()
     
        def replace(self, bean):
            keys = []
            values = []
            self.__create_table(bean.__class__.__name__)
            columns = self.__get_columns(bean.__class__.__name__)
            for key in bean.__dict__:
                keys.append(key)
                if key not in columns:
                    self.__create_column(bean.__class__.__name__, key,
                            type(bean.__dict__[key]))
                if isinstance(bean.__dict__[key], uuid.UUID):
                    values.append(sqlite3.Binary(bean.__dict__[key].bytes))
                else:
                    values.append(bean.__dict__[key])
            cursor = self.db.cursor()
            sql  = "replace into " + bean.__class__.__name__ + "(" 
            sql += ",".join(keys) + ") values (" 
            sql += ",".join(["?" for i in keys])  +  ")"
            cursor.execute(sql, values)
            self.db.commit()
     
        def __create_column(self, table, column, sqltype):
            if self.frozen:
                return
            if sqltype in [float, int, bool]:
                sqltype = "NUMERIC"
            else:
                sqltype = "TEXT"
            sql = "alter table " + table + " add " + column + " " + sqltype    
            self.db.cursor().execute(sql)
            self.db.commit()
     
        def __get_columns(self, table):
            columns = []
            if self.frozen:
                return columns
            cursor = self.db.cursor()
            cursor.execute("PRAGMA table_info(" + table  + ")")
            for row in cursor:
                columns.append(row["name"])
            return columns
     
        def __create_table(self, table):
            if self.frozen:
                return
            sql = "create table if not exists " + table + "(uuid primary key)"
            self.db.cursor().execute(sql)
            self.db.commit()
     
        def get_rows(self, table_name, sql = "1", replace = None):
            if replace is None : replace = []
            self.__create_table(table_name)
            sql = "SELECT * FROM " + table_name + " WHERE " + sql
            cursor = self.db.cursor()
            try:
                cursor.execute(sql, replace)
                for row in cursor:
                    yield row
            except sqlite3.OperationalError:
                return
     
        def get_count(self, table_name, sql="1", replace = None):
            if replace is None : replace = []
            self.__create_table(table_name)
            cursor = self.db.cursor()
            sql = "SELECT count(*) AS cnt FROM " + table_name + " WHERE " + sql
            try:
                cursor.execute(sql, replace)
            except sqlite3.OperationalError:
                return 0
            for row in cursor:
                return row["cnt"]
     
        def delete(self, bean):
            self.__create_table(bean.__class__.__name__)
            sql = "delete from " + bean.__class__.__name__ + " where uuid=?"
            self.db.cursor().execute(sql,[sqlite3.Binary(bean.uuid.bytes)])
            self.db.commit()
     
        def link(self, bean_a, bean_b):
            self.replace(bean_a)
            self.replace(bean_b)
            table_a = bean_a.__class__.__name__
            table_b = bean_b.__class__.__name__
            assoc_table = self.__create_assoc_table(table_a, table_b)
            sql = "replace into " + assoc_table + "(" + table_a + "_uuid," + table_b
            sql += "_uuid) values(?,?)"
            self.db.cursor().execute(sql, 
                    [buffer(bean_a.uuid.bytes), buffer(bean_b.uuid.bytes)])
            self.db.commit()
     
        def unlink(self, bean_a, bean_b):
            table_a = bean_a.__class__.__name__
            table_b = bean_b.__class__.__name__
            assoc_table = self.__create_assoc_table(table_a, table_b)
            sql = "delete from " + assoc_table + " where " + table_a
            sql += "_uuid=? and " + table_b + "_uuid=?"
            self.db.cursor().execute(sql,
                    [buffer(bean_a.uuid.bytes), buffer(bean_b.uuid.bytes)]) 
            self.db.commit()
     
        def get_linked_rows(self, bean, table_name):
            bean_table = bean.__class__.__name__
            assoc_table = self.__create_assoc_table(bean_table, table_name)
            cursor = self.db.cursor()
            sql = "select t.* from " + table_name + " t inner join " + assoc_table 
            sql += " a on a." + table_name + "_uuid = t.uuid where a." 
            sql += bean_table + "_uuid=?"
            cursor.execute(sql,[buffer(bean.uuid.bytes)])
            for row in cursor:
                yield row
     
        def __create_assoc_table(self, table_a, table_b):
            assoc_table = "_".join(sorted([table_a, table_b]))
            if not self.frozen:
                sql = "create table if not exists " + assoc_table + "("
                sql+= table_a + "_uuid NOT NULL REFERENCES " + table_a + "(uuid) ON DELETE cascade,"
                sql+= table_b + "_uuid NOT NULL REFERENCES " + table_b + "(uuid) ON DELETE cascade,"
                sql+= " PRIMARY KEY (" + table_a + "_uuid," + table_b + "_uuid));"
                self.db.cursor().execute(sql)
                # no real support for foreign keys until sqlite3 v3.6.19
                # so here's the hack
                if cmp(parse_version(sqlite3.sqlite_version),parse_version("3.6.19")) < 0:
                    sql = "create trigger if not exists fk_" + table_a + "_" + assoc_table
                    sql+= " before delete on " + table_a
                    sql+= " for each row begin delete from " + assoc_table + " where " + table_a + "_uuid = OLD.uuid;end;"
                    self.db.cursor().execute(sql)
                    sql = "create trigger if not exists fk_" + table_b + "_" + assoc_table
                    sql+= " before delete on " + table_b
                    sql+= " for each row begin delete from " + assoc_table + " where " + table_b + "_uuid = OLD.uuid;end;"
                    self.db.cursor().execute(sql)
            self.db.commit()        
            return assoc_table
     
        def delete_all(self, table_name, sql = "1", replace = None):
            if replace is None : replace = []
            self.__create_table(table_name)
            cursor = self.db.cursor()
            sql = "DELETE FROM " + table_name + " WHERE " + sql
            try:
                cursor.execute(sql, replace)
                return True
            except sqlite3.OperationalError:
                return False
     
    class Store(object):
        """
        A SQL writer should be passed to the constructor:
     
        beans_save = Store(SQLiteWriter(":memory"), frozen=False)
        """
        def __init__(self, SQLWriter):
            self.writer = SQLWriter 
     
        def new(self, table_name):
            new_object = type(table_name,(object,),{})()
            new_object.uuid = uuid.uuid4()
            return new_object
     
        def save(self, bean):
            self.writer.replace(bean)
     
        def load(self, table_name, uuid):
            for row in self.writer.get_rows(table_name, "uuid=?", [buffer(uuid.bytes)]):
                return self.row_to_object(table_name, row)
     
        def count(self, table_name, sql = "1", replace=None):
            return self.writer.get_count(table_name, sql, replace if replace is not None else [])
     
        def find(self, table_name, sql = "1", replace=None):
            for row in self.writer.get_rows(table_name, sql, replace if replace is not None else []):
                yield self.row_to_object(table_name, row)
     
        def find_one(self, table_name, sql = "1", replace=None):
            try:
                return next(self.find(table_name, sql, replace))
                # 原先程式只能用於 Python2, 配合 Python3, 修改為上一行
                #return self.find(table_name, sql, replace).next()
            except StopIteration:
                return None
     
        def delete(self, bean):
            self.writer.delete(bean)
     
        def link(self, bean_a, bean_b):
            self.writer.link(bean_a, bean_b)
     
        def unlink(self, bean_a, bean_b):
            self.writer.unlink(bean_a, bean_b)
     
        def get_linked(self, bean, table_name):
            for row in self.writer.get_linked_rows(bean, table_name):
                yield self.row_to_object(table_name, row)
     
        def delete_all(self, table_name, sql = "1", replace=None):
            return self.writer.delete_all(table_name, sql, replace if replace is not None else [])
     
        def row_to_object(self, table_name, row):
            new_object = type(table_name,(object,),{})()
            for key in row.keys():
                if key == "uuid":
                    new_object.uuid = uuid.UUID(bytes=row[key])
                else:
                    new_object.__dict__[key] = row[key]
            return new_object
.. @-all
.. @-leo
