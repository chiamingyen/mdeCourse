.. @+leo-ver=5-thin
.. @+node:amd_yen.20130308210411.2407: * @file wcm.txt
.. @@language rest
.. @@tabwidth -4

.. @+at @rst-options
..  call_docutils=False
..  code_mode=False
..  generate_rst=True
..  http_server_support = False
..  show_organizer_nodes=True
..  show_headlines=True
..  show_leo_directives=True
..  stylesheet_path=..\doc
..  write_intermediate_file = True
..  verbose=True
.. @@c

.. @+all
.. @+node:amd_yen.20130308210411.2408: ** @rst document\wcm.html
################################################
網際內容管理
################################################

.. index:: 網際內容管理

.. contents::
    :depth: 3
.. @+node:amd_yen.20130308210411.2409: *3* @rst-no-head Links
.. @+node:amd_yen.20130308210411.2410: *3* WCM 第一週
網際內容管理課程的英文為

Introduction to Web Content Management Systems Site Development

本課程主要目的在於教導學員建構網站, 而且是建構與內容管理系統相關的網站, 目標使用者為參與協同產品設計的機械設計工程師.

若直接翻譯課程的英文則為: 網際內容管理系統網站開發簡介

本課程擬介紹 WordPress 系統, 這是一套以 PHP 打造的內容管理系統, 至今 (2013) 已經是全世界使用人數最多的網誌系統, 而所謂網誌 (weblog) 其實就是利用網站來執行紀錄, 這裡所運用的層面是機械設計工程師使用導向的網路日誌, 並且以內容管理的角度進行配置.

WordPress 支援 MySQL 與 SQLite 等版本,  MySQL 為一種可跨網站的資料庫管理系統, 而 SQLite 則是一種小型的單機檔案儲存為主的資料庫系統.

所謂資料庫, 指的是能夠利用 SQL 結構查詢語言與資料伺服器進行溝通的資料儲存主機, 這些主機為了達成資料儲存的目的所運行的伺服器程式, 就是資料庫管理系統.

實際操作:

.. code-block:: none

    1. 單機可攜系統下的 WordPress (電腦教室主機上的 WordPress 與光世代網路上的主機 WordPress)
    
    2. OpenShift 平台上的 WordPress
.. @+node:amd_yen.20130308214521.2419: *3* WCM 第二週
第一週 228 放假

安裝 WordPress

可分別下載 WordPress 3.2.1 與 3.5.1 版本

http://cae.mde.tw?download=wordpress321.7z

http://cae.mde.tw?download=wordpress351.7z
.. @+node:amd_yen.20130309155804.1705: *3* WCM 第三週
利用 Python 程式 新增 WordPress 內容

.. code-block:: python
    :linenos:
    
    import datetime, xmlrpclib
    wp_url = "http://www.example.com/xmlrpc.php"
    wp_username = "someuser"
    wp_password = "secret"
    wp_blogid = ""
    
    status_draft = 0
    status_published = 1
    
    server = xmlrpclib.ServerProxy(wp_url)
    
    title = "Title with spaces"
    content = "Body with lots of content"
    date_created = xmlrpclib.DateTime(datetime.datetime.strptime("2009-10-20 21:08", "%Y-%m-%d %H:%M"))
    categories = ["somecategory"]
    tags = ["sometag", "othertag"]
    data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}
    
    post_id = server.metaWeblog.newPost(wp_blogid, wp_username, wp_password, data, status_published)
    
WordPress 中的 categories

.. code-block:: python

    categories = server.metaWeblog.getCategories(wp_blogid, wp_username, wp_password)
    
    for item in categories:
    print (item['description'])
    
.. code-block:: python
    :linenos:
    
    import xmlrpclib
    
    XMLRPC_ENDPOINT = "http://www.YOURBLOG.com/xmlrpc.php"
    USERNAME = "YOURUSERNAME"
    PASSWORD = "YOURPASSWORD"
    BLOGID = "0" # Blog ID, 如果是單用戶的WordPress系統，則為0
    
    client = xmlrpclib.ServerProxy(XMLRPC_ENDPOINT)
    # 取出 1000 篇文章
    posts = client.metaWeblog.getRecentPosts(BLOGID, USERNAME, PASSWORD, 1000) 
    
    for post in posts:
        print post
        DO_SOMETHING_ELSE()
    '''
    需要注意的是，返回的post所帶的wp_slug參數是經過quote了的，需要unquote來得到原始的值，代碼片段如下：
    
    import urllib
    slug = urllib.unquote(post['wp_slug']).decode("utf8")
    使用WordPress的xmlrpc介面還可以方便的進行其他操作，所有介面函數列表可以使用 mt.supportedMethods()函數獲得，如下：
    >>> client.mt.supportedMethods()
    '''
    
利用 Python3 程式直接將網誌內容, 以 xmlrpc 格式放入 WordPress 的資料庫中, 其中有兩個重點必須注意.

第一個重點為主機時差與程式設定的時差必須配合, 因為 WordPress 伺服器程式有時差的設定, 原則上 Server OS 有一個時間設定, WordPress 程式也有時差設定, 而執行 Python3 的程式也有時差設定.

若將 WordPress 時間調為台灣時間, 且 Python3 程式也是台北時間, 則實際將內容送到 Server 時, 顯示在網誌內容上的時間將會是實際台灣時間八個小時後的時間 (有可能是聰明的 Python3 程式內與 xmlrpc 程式自我調適的問題?).

因此, 在實作上, 即使 WordPress 與 Python3 程式都設為台灣時間, 網誌內容的時間還是必須提前八個小時, 送到網誌的時間註記才會是程式執行時的時間, 因為時間只設到 "分", 而沒有 "秒", 因此程式執行結束後, 就會直接顯示在網誌上.

而第二個重點則是牽涉到 Python3 字串與 html 字串, 在 Code-box plugin 標註程式碼的 <pre> 與 </pre> 間, 若出現用來標示程式的內容(也就是說, 要在程式的標示區段中帶有 nested <pre> 與 </pre> 時所存在的問題, 因為 Code-box 標示程式會誤判程式區段範圍), 必須仔細與 html 內容中的"實際 pre 標註"進行區隔.

因為 Code-box 實際運作模式下是以 Javascript 來區別程式段落, 因此整體的網誌內容牽涉到 Python, html 與 Javascript 對於字串內容的辨識,  目前僅將 Python 字串中需要標示程式碼的 </pre> 標註, 分別在前後各加上反斜線 (亦即告訴 Code-box, 這不是程式標註的結束, 而只是程式標註的內容), 但是呈現在網誌中的程式就會多出這兩個反斜線, 因此目前只能以說明提醒使用者, 在複製內容時必須留意處理, 之後應該要找出更好的解決方案.

以下為利用 Python3 將內容直接送到 WordPress 的程式列表, 特別注意 Python3 已經將原先 Python2 xmlrpc 的模組名稱改為 xmlrpc.client.

.. code-block:: python
    :linenos:
    
    #coding: utf-8
    import xmlrpc.client
    import datetime
    import os
    os.environ['TZ'] = 'Asia/Taipei'
     
    wp_url = "https://WordPress網誌網址/xmlrpc.php"
    wp_username = "帳號"
    wp_password = "密碼"
    wp_blogid = "0"
     
    status_draft = 0
    status_published = 1
     
    server = xmlrpc.client.ServerProxy(wp_url)
     
    title = "以現在時間上傳網誌, 再試一次"
    content = "這是以 Python 程式新增的網誌內容!
    並且進行跳行
    前面這裡跳行.<!--more-->"
    content +="<pre lang="python" line="1" colla="+">"
    content +='''
    #coding: utf-8
    import xmlrpc.client
    import datetime
    import os
    os.environ['TZ'] = 'Asia/Taipei'
    for 索引 in range(10):
        print("測試")
    '''
    # 請注意, 以下的 /pre 標駐要拿掉兩個反斜線?
    # 因為在 Python3 程式, 組成字串, 然後放入 WordPress PHP 資料庫中,最後以 html 展示出來, 
    # 確實需要多方考量, 若下一行在 Python3 程式字串中沒有 \< 與 \>, 則 Code-box plugin 會將此
    # 標註視為結束, 而程式 highlight 就會斷在這裡...
    content +="</pre>"
    # 指定時間出版
    #date_created = xmlrpc.client.DateTime(datetime.datetime.strptime("2013-01-01 00:00", "%Y-%m-%d %H:%M"))
    # 以現在時間出版, 考慮與 Server 時間差八個小時 (480 分鐘), 因此要在 8 個小時前發表
    date_created = xmlrpc.client.DateTime(datetime.datetime.strptime((datetime.datetime.now()- \
    datetime.timedelta(minutes=480)).strftime('%Y-%m-%d %H:%M'),"%Y-%m-%d %H:%M"))
    categories = ["Uncategorized"]
    tags = ["python", "測試"]
    data = {'title': title, 'description': content, 'dateCreated': date_created, 'categories': categories, 'mt_keywords': tags}
     
    post_id = server.metaWeblog.newPost(wp_blogid, wp_username, wp_password, data, status_published)
    '''
    其他 metaWeblog 的用法:
    metaWeblog.newPost (blogid, username, password, struct, publish) returns string(postid)
    metaWeblog.editPost (postid, username, password, struct, publish) returns true
    metaWeblog.getPost (postid, username, password) returns struct(blog content)
    '''
    
其他參考資料:

https://github.com/charlax/wordpresslib

https://python-wordpress-xmlrpc.readthedocs.org/en/latest/

.. @+node:amd_yen.20130309155804.1710: *3* WCM 第四週
安裝 wp-codebox plugin - 可以 highlight 內容中的程式碼.

用法 <pre lang="python" line="1" colla="+">程式內容</pre>

寫一個 WordPress 的 Plugin

中文

http://www.misterngan.com/?p=475

http://www.misterngan.com/?p=500

http://kangzj.net/wordpress-plugin-tutorial-1/

http://blog.wpjam.com/2007/11/09/write-plugin-by-yourself-begin/

英文

https://codex.wordpress.org/Writing_a_Plugin

http://pelfusion.com/20-tutorials-to-develop-wordpress-plugin/

http://corpocrat.com/2009/12/27/tutorial-how-to-write-a-wordpress-plugin/

http://net.tutsplus.com/tutorials/wordpress/create-wordpress-plugins-with-oop-techniques/

看過以上這些資料後, 能否寫一個簡單的 Plugin?
.. @+node:amd_yen.20130330144838.2030: *3* WCM 第五週
Wordpress plugin:

下列延伸程式需要 jscript/brython 目錄, 可以由 CMSimple XH 目錄中取得.

.. code-block:: php

    <?php
    /*/
    Plugin Name: Basic
    Plugin URI: cmsimple.cycu.org
    Description: Demonstrates how a WP plugin works
    Version: 0.001
    Author: CMSimple
    Author URI: cmsimple.cycu.org
    /*/
    $python_console = <<<EOF
    <p>以 Brython 編寫的線上 Python3 執行環境 (僅支援少數展示用功能):</p>
    <p><script src="jscript/brython/brython.js"></script>
    <script>
    window.onload = function(){
        brython(1);
    }
    </script>
    <script type="text/python">
    import sys
    import time
    import dis
    
    if sys.has_local_storage:
        import local_storage
    else:
        storage = False
    
    def reset_src():
        if local_storage.storage:
            doc['src'].value = local_storage.storage["py_src"]
    
    def to_str(xx):
        return str(xx)
    
    doc['version'].text = '.'.join(map(to_str,sys.version_info))
    
    class cons_out:
    
        def __init__(self,target):
            self.target = doc[target]
        def write(self,data):
            self.target.value += str(data)
    
    sys.stdout = cons_out("console")
    sys.stderr = cons_out("console")
    
    output = ''
    
    def show_console():
        doc["console"].value = output
        doc["console"].cols = 60
    
    def clear_text():
        log(" event clear")
        doc['console'].value=''
        doc['src'].value=''
    
    def run():
        global output
        doc["console"].value=''
        doc["console"].cols = 60
        src = doc["src"].value
        if local_storage.storage:
            local_storage.storage["py_src"]=src
        t0 = time.time()
        exec(src)
        output = doc["console"].value
        print('<done in %s ms>' %(time.time()-t0))
    
    def show_js():
        src = doc["src"].value
        doc["console"].cols = 90
        doc["console"].value = dis.dis(src)
    </script>
    <table width=80%>
    <tr><td style="text-align:center"><b>Python</b>
    </td>
    <td>&nbsp;</td>
    <th><button onClick="show_console()">Console</button></th>
    <th><button onClick="show_js()">Javascript</button></th>
    </tr>
    <tr><td colspan><textarea id="src" cols="60" rows="20">def 執行函式(次數, 字串):
        for 索引 in range(次數):
            print(字串)
    
    執行函式(5, "Brython 可以執行")</textarea></td><td><button onClick="run()">run</button></td>
    <td><button onClick="clear_text()">clear</button></td>
    <td colspan=2><textarea id="console" cols=70 rows=20></textarea></td>
    </tr>
    <tr><td colspan=2>
    <p>Brython version <span id="version"></span>
    </table>
    </p>
    EOF;
    
    $view_part = <<<EOF
    <p>Three.js 的 3D 零件展示, 目前僅支援 ASCII STL 檔案格式.</p>
    <p>        <style type="text/css">
            body{
                background-color:AntiqueWhite;
            }
            #webgl {
                background-color:white;
                border:solid 1px black;
                width:640px;
                height:480px;
            }
            div.centered{
                display:block;
    
                width:350px;z-index: 21;
                background-color: MintCream;
                border: 0px solid black;
            }
        </style>
        <script src="jscript/partview/Three.js"></script>
        <script src="jscript/partview/RequestAnimationFrame.js"></script>
        <script src="jscript/partview/objstl.js"></script>
        </head>
        <body>
        <script>
        window.onload = function ()
        {
            load();example("downloads/spikeball.stl");    }
        </script>
        <div id="centered" class="centered">
        </div>
        <div id="webgl" oncontextmenu="return false;">
        </div></p>
    EOF;
    
    function basic_title_replace ($text){
        $text = str_replace("Old","換成新的",$text);
        return $text;
    }
    
    function basic_content_replace ($text){
        global $python_console, $view_part;
        $text = str_replace("Old","換成新的內容",$text);
        $text .= $python_console;
        //$text .= $view_part;
        return $text;
    }
    
    add_filter("the_content","basic_content_replace");
    add_filter("the_title","basic_title_replace");

.. @+node:amd_yen.20130330144838.2031: *3* WCM 第七週
Wordpress plugin 編寫導引: http://pelfusion.com/20-tutorials-to-develop-wordpress-plugin/

將 brython console 環境寫為 Wordpress 的 plugin:

.. code-block:: php

    <?php
    /*/
    Plugin Name: Basic
    Plugin URI: cmsimple.cycu.org
    Description: Demonstrates how a WP plugin works
    Version: 0.001
    Author: CMSimple
    Author URI: cmsimple.cycu.org
    /*/
    $python_console = <<<EOF
    <p>以 Brython 編寫的線上 Python3 執行環境 (僅支援少數展示用功能):</p>
    <p><script src="jscript/brython/brython.js"></script>
    <script>
    window.onload = function(){
        brython(1);
    }
    </script>
    <script type="text/python">
    import sys
    import time
    import dis
    
    if sys.has_local_storage:
        import local_storage
    else:
        storage = False
    
    def reset_src():
        if local_storage.storage:
            doc['src'].value = local_storage.storage["py_src"]
    
    def to_str(xx):
        return str(xx)
    
    doc['version'].text = '.'.join(map(to_str,sys.version_info))
    
    class cons_out:
    
        def __init__(self,target):
            self.target = doc[target]
        def write(self,data):
            self.target.value += str(data)
    
    sys.stdout = cons_out("console")
    sys.stderr = cons_out("console")
    
    output = ''
    
    def show_console():
        doc["console"].value = output
        doc["console"].cols = 60
    
    def clear_text():
        log(" event clear")
        doc['console'].value=''
        doc['src'].value=''
    
    def run():
        global output
        doc["console"].value=''
        doc["console"].cols = 60
        src = doc["src"].value
        if local_storage.storage:
            local_storage.storage["py_src"]=src
        t0 = time.time()
        exec(src)
        output = doc["console"].value
        print('<done in %s ms>' %(time.time()-t0))
    
    def show_js():
        src = doc["src"].value
        doc["console"].cols = 90
        doc["console"].value = dis.dis(src)
    </script>
    <table width=80%>
    <tr><td style="text-align:center"><b>Python</b>
    </td>
    <td>&nbsp;</td>
    <th><button onClick="show_console()">Console</button></th>
    <th><button onClick="show_js()">Javascript</button></th>
    </tr>
    <tr><td colspan><textarea id="src" cols="60" rows="20">def 執行函式(次數, 字串):
        for 索引 in range(次數):
            print(字串)
    
    執行函式(5, "Brython 可以執行")</textarea></td><td><button onClick="run()">run</button></td>
    <td><button onClick="clear_text()">clear</button></td>
    <td colspan=2><textarea id="console" cols=70 rows=20></textarea></td>
    </tr>
    <tr><td colspan=2>
    <p>Brython version <span id="version"></span>
    </table>
    </p>
    EOF;
    
    $view_part = <<<EOF
    <p>Three.js 的 3D 零件展示, 目前僅支援 ASCII STL 檔案格式.</p>
    <p>        <style type="text/css">
            body{
                background-color:AntiqueWhite;
            }
            #webgl {
                background-color:white;
                border:solid 1px black;
                width:640px;
                height:480px;
            }
            div.centered{
                display:block;
    
                width:350px;z-index: 21;
                background-color: MintCream;
                border: 0px solid black;
            }
        </style>
        <script src="jscript/partview/Three.js"></script>
        <script src="jscript/partview/RequestAnimationFrame.js"></script>
        <script src="jscript/partview/objstl.js"></script>
        </head>
        <body>
        <script>
        window.onload = function ()
        {
            load();example("downloads/spikeball.stl");    }
        </script>
        <div id="centered" class="centered">
        </div>
        <div id="webgl" oncontextmenu="return false;">
        </div></p>
    EOF;
    
    function basic_title_replace ($text){
        $text = str_replace("Old","換成新的",$text);
        return $text;
    }
    
    function basic_content_replace ($text){
        global $python_console, $view_part;
        $text = str_replace("Old","換成新的內容",$text);
        $text .= $python_console;
        //$text .= $view_part;
        return $text;
    }
    
    add_filter("the_content","basic_content_replace");
    add_filter("the_title","basic_title_replace");


另外一個 Python3 的內容管理系統將介紹 django
.. @+node:amd_yen.20130406103207.2284: *4* django 程式開發
.. @+node:amd_yen.20130418193628.2823: *3* WCM 第十週
.. @+node:amd_yen.20130418193628.2822: *4* 建立各小組遠端主機
提醒: 

1. 網路上的免費虛擬主機通常並不支援 SSL 與 SFTP, 因此只能作為測試之用, 儘量不要用於 production.

2. 免費虛擬主機為了"導引"用戶使用付費服務, 因此可能會禁止使用某些特定的網路協定或降低網站的"可用性", 這些可用性包括只能上傳至多 8 MB 的檔案, 無法透過 socket 傳輸資料 (因而無法使用寄信與 IMAP/SMTP 認證).

3. 免費虛擬主機所建立的網站在特定時間可能會突然斷線, 而且一旦公司策略達成, 將會無預警斷線而無法使用.

為了讓各小組可以擁有一台廣域網路上的網際內容管理與協同產品設計主機, 擬透過免費虛擬主機進行:

選擇提供 10GB 空間的免費虛擬主機商: http://www.1freehosting.com/

特別注意: 採用網路上類似的免費虛擬主機時, 必須了解這些公司提供免費主機的目的, 通常在策略性增加公司網路對外連線與用戶數量, 因為網路連線與用戶使用紀錄可以提升這些公司在許多創投或貸款抵押之談判籌碼, 一旦達到階段性任務目的或用戶未能配合遵守使用規範, 都可能因為突然斷線或免費帳戶被刪除而無法使用, 因此免費虛擬主機僅可提供短期測試用, 比較不建議長期作為運轉主機.

免費虛擬主機與付費虛擬主機的差別:

1. 就一般使用操作流程, 兩者幾乎沒有差別, 都提供一流的瀏覽器介面服務, 且大多提供 PHP 程式伺服, 少數提供 Python、Java 或 Ruby 等伺服程式技術.

2. 部分免費虛擬主機也提供 https:// 與 SFTP 等安全連線, 但是大多數都不提供安全連線, 因此僅能作為測試使用.

3. 免費虛擬主機的斷線比例與帳號正常使用率, 通常比付費帳號低, 但是在短期使用時通常可達 99 %.

問題: 為何這裡將 Web Hosting (網際主機) 稱為 Virtual Hosting (虛擬主機)? 答案就在全球資訊網伺服器的設定, 允許將一台硬體透過 Virtual Host 的設定, 讓多個網域名稱共用同一硬體, 且可以透過同一埠號 (80) 進行伺服.

執行步驟:

1. 利用電子郵箱到 http://www.1freehosting.com/ 登記一個帳號.

2. 收信點擊確認帳號連結後即可完成登錄, 開始建立虛擬主機帳號.

3. 下載 Filezilla (可攜或安裝版都可以), 設定 ftp 檔案傳輸連線設定. (免費帳號僅可使用 ftp, port 21 傳輸資料沒有編碼, 而非較安全的 sftp, port 22, 編碼後傳輸).

4. 先確認網址已經可以連線, 將 default.php 改為 index.php 測試是否可以連線.

5. 先將 CMSimple 程式碼以 ftp 連線送到 public_html 目錄下.

6. 確定 CMSimple 網站可以正常運作, 例如: http://2012c1.hostingsiteforfree.com/ (免費帳號並不提供 SSL 連線, 僅能以 http:// 連線)

7. 設定 MySQL 帳號, 並且再建立一個給 Wordpress 或 Simple Groupware 架站使用的虛擬主機 subdomain.

8. 將 Wordpress 或 Simple Groupware 程式送到主機對應的 public_html 目錄 subdomain 下, 例如 Simple Groupware subdomain 為 sgw, 則程式位於 public_html/sgw, 而 Wordpress 之 subdomain 為 wordpress, 程式目錄為 public_html/wordpress (對應的網址則為 http://sgw.2012c1.hostingsiteforfree.com 與 http://wordpress.2012c1.hostingsiteforfree.com.

9. 根據所設定的 MySQL 帳號, 開始安裝 Simple Groupware, 而 Wordpress 可以使用 Website->Auto Installer 將 Wordpress 3.3.1 安裝到 public_html/wordpress, 並且與上一步驟的 subdomain 設定對應, 使用者可以透過 http://wordpress.2012c1.hostingsiteforfree.com 或  http://2012c1.hostingsiteforfree.com/wordpress 連線到所安裝的 Wordpress, 使用 Auto Installer 功能並不建議使用線上版次升級, 因為會讓 Auto Installer 工具無法控管, 因此 Wordpress 就停留在 3.3.1 版.

9.1. (for 協同產品設計實習) 在實際安裝 Simple Groupware 過程, 發現遠端主機由 src 目錄複製 bin 目錄過程較為緩慢, 建議使用者可以在單機先選擇 English 安裝, 並在近端先完成 bin 目錄的複製後, 再將程式碼以 FTP 送到遠端主機後執行第二階段的資料庫設定安裝.

9.1. (for 網際內容管理) 採用 Auto Installer 的 Wordpress 網站無法正確顯示中文內容, 因此最後建議採用自行安裝 3.5.1 版.

10. 測試是否安裝完成.

11. (for 協同產品設計實習) 將 Simple Groupware 設為 IMAP 驗證, 各小組成員在廣域主機登錄帳號.

12. (for 協同產品設計實習) 設定主機之寄信功能, 完成後開始進行各小組的協同產品設計實習, 並著手建立正齒輪減速機模組程式與 Python Console 程式環境.

11. (for 網際內容管理) 在 Wordpress 主機上為各小組成員建立帳號, 並且由各成員利用 Python 程式將網誌內容送到遠端主機.

12. (for 網際內容管理) 在 Wordpress 主機上建立 Python Console 以及 View Part plugins 程式.
.. @-all
.. @-leo
